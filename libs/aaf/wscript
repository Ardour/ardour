#!/usr/bin/env python
from waflib.extras import autowaf as autowaf

# Version of this package (even if built as a child)
LIBAAF_VERSION = '0.0.0'
LIBAAF_LIB_VERSION = '0.0.0'

# Variables for 'waf dist'
APPNAME = 'libaaf'
VERSION = LIBAAF_VERSION
I18N_PACKAGE = 'libaaf'

# Mandatory variables
top = '.'
out = 'build'

libaaf_sources = [
   "src/common/utils.c",
   "src/debug.c",
   "src/AAFIface/ProTools.c",
   "src/AAFIface/AAFIface.c",
   "src/AAFIface/RIFFParser.c",
   "src/AAFIface/AAFIParser.c",
   "src/AAFIface/URIParser.c",
   "src/AAFIface/AAFIAudioFiles.c",
   "src/AAFIface/Resolve.c",
   "src/LibCFB/LibCFB.c",
   "src/LibCFB/CFBDump.c",
   "src/AAFCore/AAFCore.c",
   "src/AAFCore/AAFClass.c",
   "src/AAFCore/AAFDump.c",
   "src/AAFCore/AAFToText.c",
]

def options(opt):
    autowaf.set_options(opt)

def configure(conf):
    if conf.is_defined('USE_EXTERNAL_LIBS'):
        conf.check_cxx(header_name="libaaf.h", mandatory=True)
        conf.check_cxx(lib="aaf", mandatory=True, uselib_store="LIBAAF")

def build(bld):
    if bld.is_defined('USE_EXTERNAL_LIBS'):
        return

    if bld.is_defined ('INTERNAL_SHARED_LIBS'):
        obj              = bld.shlib(features = 'c cshlib', source=libaaf_sources)
        obj.defines = [ 'LIBAAF_DLL_EXPORTS=1' ]
    else:
        obj              = bld.stlib(features = 'c cshlib', source=libaaf_sources)
        obj.cflags       = [ bld.env['compiler_flags_dict']['pic'] ]
        obj.defines      = []

    obj.export_includes  = ['./include']
    obj.includes         = ['./include']
    obj.name             = 'libaaf'
    obj.target           = 'aaf'
    #obj.uselib          = 'GLIB'
    obj.vnum             = LIBAAF_LIB_VERSION
    obj.install_path     = bld.env['LIBDIR']
    obj.defines         += [ 'PACKAGE="' + I18N_PACKAGE + '"' ]

def shutdown():
    autowaf.shutdown()
