// Generated by gmmproc 2.45.3 -- DO NOT MODIFY!


#include <glibmm.h>

#include <ydkmm/pixbufanimationiter.h>
#include <ydkmm/private/pixbufanimationiter_p.h>


// -*- c++ -*-
/* $Id: pixbufanimationiter.ccg,v 1.1 2003/01/21 13:38:37 murrayc Exp $ */

/*
 *
 * Copyright 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Gdk
{

bool PixbufAnimationIter::advance()
{
  return gdk_pixbuf_animation_iter_advance(gobj(), NULL);
}

} //namespace Gdk


namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Gdk::PixbufAnimationIter> wrap(GdkPixbufAnimationIter* object, bool take_copy)
{
  return Glib::RefPtr<Gdk::PixbufAnimationIter>( dynamic_cast<Gdk::PixbufAnimationIter*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gdk
{


/* The *_Class implementation: */

const Glib::Class& PixbufAnimationIter_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &PixbufAnimationIter_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gdk_pixbuf_animation_iter_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void PixbufAnimationIter_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* PixbufAnimationIter_Class::wrap_new(GObject* object)
{
  return new PixbufAnimationIter((GdkPixbufAnimationIter*)object);
}


/* The implementation: */

GdkPixbufAnimationIter* PixbufAnimationIter::gobj_copy()
{
  reference();
  return gobj();
}

PixbufAnimationIter::PixbufAnimationIter(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{

}

PixbufAnimationIter::PixbufAnimationIter(GdkPixbufAnimationIter* castitem)
:
  Glib::Object((GObject*)(castitem))
{}


PixbufAnimationIter::~PixbufAnimationIter()
{}


PixbufAnimationIter::CppClassType PixbufAnimationIter::pixbufanimationiter_class_; // initialize static member

GType PixbufAnimationIter::get_type()
{
  return pixbufanimationiter_class_.init().get_type();
}


GType PixbufAnimationIter::get_base_type()
{
  return gdk_pixbuf_animation_iter_get_type();
}


int PixbufAnimationIter::get_delay_time() const
{
  return gdk_pixbuf_animation_iter_get_delay_time(const_cast<GdkPixbufAnimationIter*>(gobj()));
}

Glib::RefPtr<Gdk::Pixbuf> PixbufAnimationIter::get_pixbuf()
{
  Glib::RefPtr<Gdk::Pixbuf> retvalue = Glib::wrap(gdk_pixbuf_animation_iter_get_pixbuf(gobj()));
  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;
}

Glib::RefPtr<const Gdk::Pixbuf> PixbufAnimationIter::get_pixbuf() const
{
  return const_cast<PixbufAnimationIter*>(this)->get_pixbuf();
}

bool PixbufAnimationIter::on_currently_loading_frame() const
{
  return gdk_pixbuf_animation_iter_on_currently_loading_frame(const_cast<GdkPixbufAnimationIter*>(gobj()));
}

bool PixbufAnimationIter::advance(const Glib::TimeVal& current_time)
{
  return gdk_pixbuf_animation_iter_advance(gobj(), static_cast<const GTimeVal*>(&current_time));
}


} // namespace Gdk


