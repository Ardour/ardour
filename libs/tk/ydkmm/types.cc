// Generated by gmmproc 2.45.3 -- DO NOT MODIFY!


#include <glibmm.h>

#include <ydkmm/types.h>
#include <ydkmm/private/types_p.h>


// -*- c++ -*-
/* $Id: types.ccg,v 1.3 2004/02/10 17:29:54 mxpxpod Exp $ */

/* Copyright 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

namespace Gdk
{

Point::Point()
{
  gobject_.x = 0;
  gobject_.y = 0;
}

Point::Point(int x, int y)
{
  gobject_.x = x;
  gobject_.y = y;
}

bool Point::equal(const Gdk::Point& rhs) const
{
  return (gobject_.x == rhs.gobject_.x) && (gobject_.y == rhs.gobject_.y);
}

// static
GdkAtom AtomStringTraits::to_c_type(const std::string& atom_name)
{
  return gdk_atom_intern(atom_name.c_str(), 0);
}

// static
std::string AtomStringTraits::to_cpp_type(GdkAtom atom)
{
  if(char *const atom_name = gdk_atom_name(atom))
    return std::string(Gdk::ScopedPtr<char>(atom_name).get());
  else
    return std::string();
}

} // namespace Gdk


namespace Glib
{

Gdk::Point& wrap(GdkPoint* object)
{
  return *reinterpret_cast<Gdk::Point*>(object);
}

const Gdk::Point& wrap(const GdkPoint* object)
{
  return *reinterpret_cast<const Gdk::Point*>(object);
}

} // namespace Glib


namespace
{
} // anonymous namespace

// static
GType Glib::Value<Gdk::ByteOrder>::value_type()
{
  return gdk_byte_order_get_type();
}

// static
GType Glib::Value<Gdk::ModifierType>::value_type()
{
  return gdk_modifier_type_get_type();
}

// static
GType Glib::Value<Gdk::Status>::value_type()
{
  return gdk_status_get_type();
}

// static
GType Glib::Value<Gdk::InputCondition>::value_type()
{
  return gdk_input_condition_get_type();
}


namespace Gdk
{


} // namespace Gdk


