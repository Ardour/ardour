// Generated by gmmproc 2.45.3 -- DO NOT MODIFY!

//Allow us to set the struct fields.
//TODO: Remove these functions anyway in an ABI break.
#undef GSEAL_ENABLE
 

#include <glibmm.h>

#include <ytkmm/colorselection.h>
#include <ytkmm/private/colorselection_p.h>


// -*- c++ -*-
/* $Id: colorselection.ccg,v 1.7 2006/05/11 11:40:24 murrayc Exp $ */

/* Copyright 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <ytk/ytk.h>


namespace
{

static Gtk::ColorSelection::SlotChangePaletteHook* global_change_palette_hook = 0;

static void global_change_palette_hook_callback(GdkScreen* screen, const GdkColor* colors, int n_colors)
{
  g_return_if_fail(global_change_palette_hook != 0);

  try
  {
    (*global_change_palette_hook)(
        Glib::wrap(screen, true),
        Gdk::ArrayHandle_Color(colors, n_colors, Glib::OWNERSHIP_NONE));
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }
}

static void old_change_palette_hook_callback(const Glib::RefPtr<Gdk::Screen>& screen,
                                      const Gdk::ArrayHandle_Color&    colors,
                                      GtkColorSelectionChangePaletteWithScreenFunc func)
{
  g_return_if_fail(func != 0);

  (*func)(Glib::unwrap(screen), colors.data(), colors.size());
}

} // anonymous namespace


namespace Gtk
{

Gdk::Color ColorSelection::get_current_color() const
{
  Gdk::Color color; //GdkColor Just a simple struct.
  gtk_color_selection_get_current_color(const_cast<GtkColorSelection*>(gobj()), color.gobj());
  return color;
}

Gdk::Color ColorSelection::get_previous_color() const
{
  Gdk::Color color; //GdkColor Just a simple struct.
  gtk_color_selection_get_previous_color(const_cast<GtkColorSelection*>(gobj()), color.gobj());
  return color;
}

// static
Gdk::ArrayHandle_Color ColorSelection::palette_from_string(const Glib::ustring& str)
{
  GdkColor* colors = 0;
  int     n_colors = 0;

  gtk_color_selection_palette_from_string(str.c_str(), &colors, &n_colors);

  return Gdk::ArrayHandle_Color(colors, n_colors, Glib::OWNERSHIP_SHALLOW);
}

// static
Glib::ustring ColorSelection::palette_to_string(const Gdk::ArrayHandle_Color& colors)
{
  if(char *const str = gtk_color_selection_palette_to_string(colors.data(), colors.size()))
    return Glib::ustring(Gdk::ScopedPtr<char>(str).get());
  else
    return Glib::ustring();
}

// static
ColorSelection::SlotChangePaletteHook
ColorSelection::set_change_palette_hook(const ColorSelection::SlotChangePaletteHook& slot)
{
  GtkColorSelectionChangePaletteWithScreenFunc new_func = 0;
  SlotChangePaletteHook* new_slot = 0;
  SlotChangePaletteHook  old_slot;

  if(slot)
  {
    new_func = &global_change_palette_hook_callback;
    new_slot = new SlotChangePaletteHook(slot);
  }

  const GtkColorSelectionChangePaletteWithScreenFunc old_func =
      gtk_color_selection_set_change_palette_with_screen_hook(new_func);

  if(old_func)
  {
    try
    {
      if(old_func != &global_change_palette_hook_callback)
        old_slot = sigc::bind<-1>(sigc::ptr_fun(&old_change_palette_hook_callback), old_func);
      else if(global_change_palette_hook)
        old_slot = *global_change_palette_hook;
    }
    catch(...)
    {
      gtk_color_selection_set_change_palette_with_screen_hook(old_func);
      delete new_slot;
      throw;
    }
  }

  delete global_change_palette_hook;
  global_change_palette_hook = new_slot;

  return old_slot;
}

ColorSelection* ColorSelectionDialog::get_colorsel()
{
  return get_color_selection();
}

} // namespace Gtk

namespace
{


static const Glib::SignalProxyInfo ColorSelection_signal_color_changed_info =
{
  "color_changed",
  (GCallback) &Glib::SignalProxyNormal::slot0_void_callback,
  (GCallback) &Glib::SignalProxyNormal::slot0_void_callback
};


} // anonymous namespace


namespace Glib
{

Gtk::ColorSelection* wrap(GtkColorSelection* object, bool take_copy)
{
  return dynamic_cast<Gtk::ColorSelection *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& ColorSelection_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &ColorSelection_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_color_selection_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void ColorSelection_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


  klass->color_changed = &color_changed_callback;
}


void ColorSelection_Class::color_changed_callback(GtkColorSelection* self)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        obj->on_color_changed();
        return;
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
        g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
    );

  // Call the original underlying C function:
  if(base && base->color_changed)
    (*base->color_changed)(self);
}


Glib::ObjectBase* ColorSelection_Class::wrap_new(GObject* o)
{
  return manage(new ColorSelection((GtkColorSelection*)(o)));

}


/* The implementation: */

ColorSelection::ColorSelection(const Glib::ConstructParams& construct_params)
:
  Gtk::VBox(construct_params)
{
  }

ColorSelection::ColorSelection(GtkColorSelection* castitem)
:
  Gtk::VBox((GtkVBox*)(castitem))
{
  }

ColorSelection::~ColorSelection()
{
  destroy_();
}

ColorSelection::CppClassType ColorSelection::colorselection_class_; // initialize static member

GType ColorSelection::get_type()
{
  return colorselection_class_.init().get_type();
}


GType ColorSelection::get_base_type()
{
  return gtk_color_selection_get_type();
}


ColorSelection::ColorSelection()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Gtk::VBox(Glib::ConstructParams(colorselection_class_.init()))
{
  

}

bool ColorSelection::get_has_opacity_control() const
{
  return gtk_color_selection_get_has_opacity_control(const_cast<GtkColorSelection*>(gobj()));
}

void ColorSelection::set_has_opacity_control(bool has_opacity)
{
  gtk_color_selection_set_has_opacity_control(gobj(), static_cast<int>(has_opacity));
}

bool ColorSelection::get_has_palette() const
{
  return gtk_color_selection_get_has_palette(const_cast<GtkColorSelection*>(gobj()));
}

void ColorSelection::set_has_palette(bool has_palette)
{
  gtk_color_selection_set_has_palette(gobj(), static_cast<int>(has_palette));
}

void ColorSelection::set_current_color(const Gdk::Color& color)
{
  gtk_color_selection_set_current_color(gobj(), (color).gobj());
}

void ColorSelection::set_current_alpha(guint16 alpha)
{
  gtk_color_selection_set_current_alpha(gobj(), alpha);
}

guint16 ColorSelection::get_current_alpha() const
{
  return gtk_color_selection_get_current_alpha(const_cast<GtkColorSelection*>(gobj()));
}

void ColorSelection::set_previous_color(const Gdk::Color& color)
{
  gtk_color_selection_set_previous_color(gobj(), (color).gobj());
}

void ColorSelection::set_previous_alpha(guint16 alpha)
{
  gtk_color_selection_set_previous_alpha(gobj(), alpha);
}

guint16 ColorSelection::get_previous_alpha() const
{
  return gtk_color_selection_get_previous_alpha(const_cast<GtkColorSelection*>(gobj()));
}

bool ColorSelection::is_adjusting() const
{
  return gtk_color_selection_is_adjusting(const_cast<GtkColorSelection*>(gobj()));
}


Glib::SignalProxy0< void > ColorSelection::signal_color_changed()
{
  return Glib::SignalProxy0< void >(this, &ColorSelection_signal_color_changed_info);
}


Glib::PropertyProxy< bool > ColorSelection::property_has_palette() 
{
  return Glib::PropertyProxy< bool >(this, "has-palette");
}

Glib::PropertyProxy_ReadOnly< bool > ColorSelection::property_has_palette() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "has-palette");
}

Glib::PropertyProxy< bool > ColorSelection::property_has_opacity_control() 
{
  return Glib::PropertyProxy< bool >(this, "has-opacity-control");
}

Glib::PropertyProxy_ReadOnly< bool > ColorSelection::property_has_opacity_control() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "has-opacity-control");
}

Glib::PropertyProxy< Gdk::Color > ColorSelection::property_current_color() 
{
  return Glib::PropertyProxy< Gdk::Color >(this, "current-color");
}

Glib::PropertyProxy_ReadOnly< Gdk::Color > ColorSelection::property_current_color() const
{
  return Glib::PropertyProxy_ReadOnly< Gdk::Color >(this, "current-color");
}

Glib::PropertyProxy< guint > ColorSelection::property_current_alpha() 
{
  return Glib::PropertyProxy< guint >(this, "current-alpha");
}

Glib::PropertyProxy_ReadOnly< guint > ColorSelection::property_current_alpha() const
{
  return Glib::PropertyProxy_ReadOnly< guint >(this, "current-alpha");
}


void Gtk::ColorSelection::on_color_changed()
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->color_changed)
    (*base->color_changed)(gobj());
}


} // namespace Gtk


namespace Glib
{

Gtk::ColorSelectionDialog* wrap(GtkColorSelectionDialog* object, bool take_copy)
{
  return dynamic_cast<Gtk::ColorSelectionDialog *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& ColorSelectionDialog_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &ColorSelectionDialog_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_color_selection_dialog_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void ColorSelectionDialog_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* ColorSelectionDialog_Class::wrap_new(GObject* o)
{
  return new ColorSelectionDialog((GtkColorSelectionDialog*)(o)); //top-level windows can not be manage()ed.

}


/* The implementation: */

ColorSelectionDialog::ColorSelectionDialog(const Glib::ConstructParams& construct_params)
:
  Gtk::Dialog(construct_params)
{
  }

ColorSelectionDialog::ColorSelectionDialog(GtkColorSelectionDialog* castitem)
:
  Gtk::Dialog((GtkDialog*)(castitem))
{
  }

ColorSelectionDialog::~ColorSelectionDialog()
{
  destroy_();
}

ColorSelectionDialog::CppClassType ColorSelectionDialog::colorselectiondialog_class_; // initialize static member

GType ColorSelectionDialog::get_type()
{
  return colorselectiondialog_class_.init().get_type();
}


GType ColorSelectionDialog::get_base_type()
{
  return gtk_color_selection_dialog_get_type();
}

ColorSelectionDialog::ColorSelectionDialog()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Gtk::Dialog(Glib::ConstructParams(colorselectiondialog_class_.init()))
{
  

}

ColorSelectionDialog::ColorSelectionDialog(const Glib::ustring& title)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Gtk::Dialog(Glib::ConstructParams(colorselectiondialog_class_.init(), "title", title.c_str(), static_cast<char*>(0)))
{
  

}

ColorSelection* ColorSelectionDialog::get_color_selection()
{
  return Glib::wrap((GtkColorSelection*)(gtk_color_selection_dialog_get_color_selection(gobj())));
}

const ColorSelection* ColorSelectionDialog::get_color_selection() const
{
  return Glib::wrap((GtkColorSelection*)(gtk_color_selection_dialog_get_color_selection(const_cast<GtkColorSelectionDialog*>(gobj()))));
}

 Button* ColorSelectionDialog::get_ok_button()
{
  return Glib::wrap((GtkButton*)(gobj()->ok_button));
}

const Button* ColorSelectionDialog::get_ok_button() const
{
  return Glib::wrap((GtkButton*)(gobj()->ok_button));
}
 
 Button* ColorSelectionDialog::get_cancel_button()
{
  return Glib::wrap((GtkButton*)(gobj()->cancel_button));
}

const Button* ColorSelectionDialog::get_cancel_button() const
{
  return Glib::wrap((GtkButton*)(gobj()->cancel_button));
}
 
 Button* ColorSelectionDialog::get_help_button()
{
  return Glib::wrap((GtkButton*)(gobj()->help_button));
}

const Button* ColorSelectionDialog::get_help_button() const
{
  return Glib::wrap((GtkButton*)(gobj()->help_button));
}
 

Glib::PropertyProxy_ReadOnly< ColorSelection* > ColorSelectionDialog::property_color_selection() const
{
  return Glib::PropertyProxy_ReadOnly< ColorSelection* >(this, "color-selection");
}

Glib::PropertyProxy_ReadOnly< Button* > ColorSelectionDialog::property_ok_button() const
{
  return Glib::PropertyProxy_ReadOnly< Button* >(this, "ok-button");
}

Glib::PropertyProxy_ReadOnly< Button* > ColorSelectionDialog::property_cancel_button() const
{
  return Glib::PropertyProxy_ReadOnly< Button* >(this, "cancel-button");
}

Glib::PropertyProxy_ReadOnly< Button* > ColorSelectionDialog::property_help_button() const
{
  return Glib::PropertyProxy_ReadOnly< Button* >(this, "help-button");
}


} // namespace Gtk


