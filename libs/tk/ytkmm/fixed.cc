// Generated by gmmproc 2.45.3 -- DO NOT MODIFY!

// So we can still wrap the (deprecated) function.
#undef GTK_DISABLE_DEPRECATED
 

#include <glibmm.h>

#include <ytkmm/fixed.h>
#include <ytkmm/private/fixed_p.h>


// -*- c++ -*-
/* $Id: fixed.ccg,v 1.1 2003/01/21 13:38:49 murrayc Exp $ */

/* 
 *
 * Copyright 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <ytk/ytk.h>

namespace Gtk
{
}


namespace
{
} // anonymous namespace


namespace Glib
{

Gtk::Fixed* wrap(GtkFixed* object, bool take_copy)
{
  return dynamic_cast<Gtk::Fixed *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& Fixed_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &Fixed_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_fixed_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void Fixed_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* Fixed_Class::wrap_new(GObject* o)
{
  return manage(new Fixed((GtkFixed*)(o)));

}


/* The implementation: */

Fixed::Fixed(const Glib::ConstructParams& construct_params)
:
  Gtk::Container(construct_params)
{
  }

Fixed::Fixed(GtkFixed* castitem)
:
  Gtk::Container((GtkContainer*)(castitem))
{
  }

Fixed::~Fixed()
{
  destroy_();
}

Fixed::CppClassType Fixed::fixed_class_; // initialize static member

GType Fixed::get_type()
{
  return fixed_class_.init().get_type();
}


GType Fixed::get_base_type()
{
  return gtk_fixed_get_type();
}


Fixed::Fixed()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Gtk::Container(Glib::ConstructParams(fixed_class_.init()))
{
  

}

void Fixed::put(Widget& widget, int x, int y)
{
  gtk_fixed_put(gobj(), (widget).gobj(), x, y);
}

void Fixed::move(Widget& widget, int x, int y)
{
  gtk_fixed_move(gobj(), (widget).gobj(), x, y);
}

#ifndef GTKMM_DISABLE_DEPRECATED
G_GNUC_BEGIN_IGNORE_DEPRECATIONS
void Fixed::set_has_window(bool has_window)
{
  gtk_fixed_set_has_window(gobj(), static_cast<int>(has_window));
}
G_GNUC_END_IGNORE_DEPRECATIONS
#endif // GTKMM_DISABLE_DEPRECATED

#ifndef GTKMM_DISABLE_DEPRECATED
G_GNUC_BEGIN_IGNORE_DEPRECATIONS
bool Fixed::get_has_window() const
{
  return gtk_fixed_get_has_window(const_cast<GtkFixed*>(gobj()));
}
G_GNUC_END_IGNORE_DEPRECATIONS
#endif // GTKMM_DISABLE_DEPRECATED


} // namespace Gtk


