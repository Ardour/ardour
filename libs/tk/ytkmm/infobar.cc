// Generated by gmmproc 2.45.3 -- DO NOT MODIFY!


#include <glibmm.h>

#include <ytkmm/infobar.h>
#include <ytkmm/private/infobar_p.h>


// -*- c++ -*-
/* $Id: infobar.ccg,v 1.1 2003/01/21 13:38:43 murrayc Exp $ */

/* 
 *
 * Copyright 2009 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <ytk/ytk.h>

namespace Gtk
{

} // namespace Gtk


namespace
{


static void InfoBar_signal_response_callback(GtkInfoBar* self, gint p0,void* data)
{
  using namespace Gtk;
  typedef sigc::slot< void,int > SlotType;

  InfoBar* obj = dynamic_cast<InfoBar*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(p0
);
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
  }
}

static const Glib::SignalProxyInfo InfoBar_signal_response_info =
{
  "response",
  (GCallback) &InfoBar_signal_response_callback,
  (GCallback) &InfoBar_signal_response_callback
};


} // anonymous namespace


namespace Glib
{

Gtk::InfoBar* wrap(GtkInfoBar* object, bool take_copy)
{
  return dynamic_cast<Gtk::InfoBar *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& InfoBar_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &InfoBar_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_info_bar_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void InfoBar_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


  klass->response = &response_callback;
}


void InfoBar_Class::response_callback(GtkInfoBar* self, gint p0)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        obj->on_response(p0
);
        return;
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
        g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
    );

  // Call the original underlying C function:
  if(base && base->response)
    (*base->response)(self, p0);
}


Glib::ObjectBase* InfoBar_Class::wrap_new(GObject* o)
{
  return manage(new InfoBar((GtkInfoBar*)(o)));

}


/* The implementation: */

InfoBar::InfoBar(const Glib::ConstructParams& construct_params)
:
  Gtk::HBox(construct_params)
{
  }

InfoBar::InfoBar(GtkInfoBar* castitem)
:
  Gtk::HBox((GtkHBox*)(castitem))
{
  }

InfoBar::~InfoBar()
{
  destroy_();
}

InfoBar::CppClassType InfoBar::infobar_class_; // initialize static member

GType InfoBar::get_type()
{
  return infobar_class_.init().get_type();
}


GType InfoBar::get_base_type()
{
  return gtk_info_bar_get_type();
}


InfoBar::InfoBar()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Gtk::HBox(Glib::ConstructParams(infobar_class_.init()))
{
  

}

Widget* InfoBar::get_action_area()
{
  return Glib::wrap(gtk_info_bar_get_action_area(gobj()));
}

const Widget* InfoBar::get_action_area() const
{
  return Glib::wrap(gtk_info_bar_get_action_area(const_cast<GtkInfoBar*>(gobj())));
}

Widget* InfoBar::get_content_area()
{
  return Glib::wrap(gtk_info_bar_get_content_area(gobj()));
}

const Widget* InfoBar::get_content_area() const
{
  return Glib::wrap(gtk_info_bar_get_content_area(const_cast<GtkInfoBar*>(gobj())));
}

void InfoBar::add_action_widget(Widget& child, int response_id)
{
  gtk_info_bar_add_action_widget(gobj(), (child).gobj(), response_id);
}

Button* InfoBar::add_button(const Glib::ustring& button_text, int response_id)
{
  return Glib::wrap((GtkButton*)(gtk_info_bar_add_button(gobj(), button_text.c_str(), response_id)));
}

Button* InfoBar::add_button(const Gtk::StockID& stock_id, int response_id)
{
  return Glib::wrap((GtkButton*)(gtk_info_bar_add_button(gobj(), (stock_id).get_c_str(), response_id)));
}

void InfoBar::set_response_sensitive(int response_id, bool setting)
{
  gtk_info_bar_set_response_sensitive(gobj(), response_id, static_cast<int>(setting));
}

void InfoBar::set_default_response(int response_id)
{
  gtk_info_bar_set_default_response(gobj(), response_id);
}

void InfoBar::response(int response_id)
{
  gtk_info_bar_response(gobj(), response_id);
}

void InfoBar::set_message_type(MessageType message_type)
{
  gtk_info_bar_set_message_type(gobj(), ((GtkMessageType)(message_type)));
}

MessageType InfoBar::get_message_type() const
{
  return ((MessageType)(gtk_info_bar_get_message_type(const_cast<GtkInfoBar*>(gobj()))));
}


Glib::SignalProxy1< void,int > InfoBar::signal_response()
{
  return Glib::SignalProxy1< void,int >(this, &InfoBar_signal_response_info);
}


Glib::PropertyProxy< MessageType > InfoBar::property_message_type() 
{
  return Glib::PropertyProxy< MessageType >(this, "message-type");
}

Glib::PropertyProxy_ReadOnly< MessageType > InfoBar::property_message_type() const
{
  return Glib::PropertyProxy_ReadOnly< MessageType >(this, "message-type");
}


void Gtk::InfoBar::on_response(int response_id)
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->response)
    (*base->response)(gobj(),response_id);
}


} // namespace Gtk


