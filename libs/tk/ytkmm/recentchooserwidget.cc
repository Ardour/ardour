// Generated by gmmproc 2.45.3 -- DO NOT MODIFY!


#include <glibmm.h>

#include <ytkmm/recentchooserwidget.h>
#include <ytkmm/private/recentchooserwidget_p.h>


/* Copyright 2006 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <ytk/ytk.h>

namespace Gtk
{

} // namespace Gtk

namespace
{
} // anonymous namespace


namespace Glib
{

Gtk::RecentChooserWidget* wrap(GtkRecentChooserWidget* object, bool take_copy)
{
  return dynamic_cast<Gtk::RecentChooserWidget *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& RecentChooserWidget_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &RecentChooserWidget_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_recent_chooser_widget_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  RecentChooser::add_interface(get_type());

  }

  return *this;
}


void RecentChooserWidget_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* RecentChooserWidget_Class::wrap_new(GObject* o)
{
  return manage(new RecentChooserWidget((GtkRecentChooserWidget*)(o)));

}


/* The implementation: */

RecentChooserWidget::RecentChooserWidget(const Glib::ConstructParams& construct_params)
:
  Gtk::VBox(construct_params)
{
  }

RecentChooserWidget::RecentChooserWidget(GtkRecentChooserWidget* castitem)
:
  Gtk::VBox((GtkVBox*)(castitem))
{
  }

RecentChooserWidget::~RecentChooserWidget()
{
  destroy_();
}

RecentChooserWidget::CppClassType RecentChooserWidget::recentchooserwidget_class_; // initialize static member

GType RecentChooserWidget::get_type()
{
  return recentchooserwidget_class_.init().get_type();
}


GType RecentChooserWidget::get_base_type()
{
  return gtk_recent_chooser_widget_get_type();
}


RecentChooserWidget::RecentChooserWidget()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Gtk::VBox(Glib::ConstructParams(recentchooserwidget_class_.init()))
{
  

}

RecentChooserWidget::RecentChooserWidget(const Glib::RefPtr<RecentManager>& recent_manager)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Gtk::VBox(Glib::ConstructParams(recentchooserwidget_class_.init(), "recent_manager", Glib::unwrap(recent_manager), static_cast<char*>(0)))
{
  

}


} // namespace Gtk


