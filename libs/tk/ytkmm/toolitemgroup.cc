// Generated by gmmproc 2.45.3 -- DO NOT MODIFY!


#include <glibmm.h>

#include <ytkmm/toolitemgroup.h>
#include <ytkmm/private/toolitemgroup_p.h>


// -*- c++ -*-
/* $Id: toolitemgroup.ccg,v 1.1 2003/10/22 15:40:19 murrayc Exp $ */

/* 
 *
 * Copyright 2009 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <ytk/ytk.h>

namespace Gtk
{

void ToolItemGroup::insert(ToolItem& item)
{
  gtk_tool_item_group_insert(gobj(), (item).gobj(), -1 /* see docs */); 
}

} // namespace Gtk


namespace
{
} // anonymous namespace


namespace Glib
{

Gtk::ToolItemGroup* wrap(GtkToolItemGroup* object, bool take_copy)
{
  return dynamic_cast<Gtk::ToolItemGroup *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& ToolItemGroup_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &ToolItemGroup_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_tool_item_group_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  ToolShell::add_interface(get_type());

  }

  return *this;
}


void ToolItemGroup_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* ToolItemGroup_Class::wrap_new(GObject* o)
{
  return manage(new ToolItemGroup((GtkToolItemGroup*)(o)));

}


/* The implementation: */

ToolItemGroup::ToolItemGroup(const Glib::ConstructParams& construct_params)
:
  Gtk::Container(construct_params)
{
  }

ToolItemGroup::ToolItemGroup(GtkToolItemGroup* castitem)
:
  Gtk::Container((GtkContainer*)(castitem))
{
  }

ToolItemGroup::~ToolItemGroup()
{
  destroy_();
}

ToolItemGroup::CppClassType ToolItemGroup::toolitemgroup_class_; // initialize static member

GType ToolItemGroup::get_type()
{
  return toolitemgroup_class_.init().get_type();
}


GType ToolItemGroup::get_base_type()
{
  return gtk_tool_item_group_get_type();
}


ToolItemGroup::ToolItemGroup(const Glib::ustring& label)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Gtk::Container(Glib::ConstructParams(toolitemgroup_class_.init(), "label", label.c_str(), static_cast<char*>(0)))
{
  

}

void ToolItemGroup::set_label(const Glib::ustring& label)
{
  gtk_tool_item_group_set_label(gobj(), label.c_str());
}

void ToolItemGroup::set_label_widget(Widget& label_widget)
{
  gtk_tool_item_group_set_label_widget(gobj(), (label_widget).gobj());
}

void ToolItemGroup::set_collapsed(bool collapsed)
{
  gtk_tool_item_group_set_collapsed(gobj(), static_cast<int>(collapsed));
}

void ToolItemGroup::set_ellipsize(Pango::EllipsizeMode ellipsize)
{
  gtk_tool_item_group_set_ellipsize(gobj(), ((PangoEllipsizeMode)(ellipsize)));
}

void ToolItemGroup::set_header_relief(ReliefStyle style)
{
  gtk_tool_item_group_set_header_relief(gobj(), ((GtkReliefStyle)(style)));
}

Glib::ustring ToolItemGroup::get_label() const
{
  return Glib::convert_const_gchar_ptr_to_ustring(gtk_tool_item_group_get_label(const_cast<GtkToolItemGroup*>(gobj())));
}

Widget* ToolItemGroup::get_label_widget()
{
  return Glib::wrap(gtk_tool_item_group_get_label_widget(gobj()));
}

const Widget* ToolItemGroup::get_label_widget() const
{
  return const_cast<ToolItemGroup*>(this)->get_label_widget();
}

bool ToolItemGroup::get_collapsed() const
{
  return gtk_tool_item_group_get_collapsed(const_cast<GtkToolItemGroup*>(gobj()));
}

Pango::EllipsizeMode ToolItemGroup::get_ellipsize() const
{
  return ((Pango::EllipsizeMode)(gtk_tool_item_group_get_ellipsize(const_cast<GtkToolItemGroup*>(gobj()))));
}

ReliefStyle ToolItemGroup::get_header_relief() const
{
  return ((ReliefStyle)(gtk_tool_item_group_get_header_relief(const_cast<GtkToolItemGroup*>(gobj()))));
}

void ToolItemGroup::insert(ToolItem& item, int position)
{
  gtk_tool_item_group_insert(gobj(), (item).gobj(), position);
}

void ToolItemGroup::set_item_position(ToolItem& item, int position)
{
  gtk_tool_item_group_set_item_position(gobj(), (item).gobj(), position);
}

int ToolItemGroup::get_item_position(const ToolItem& item) const
{
  return gtk_tool_item_group_get_item_position(const_cast<GtkToolItemGroup*>(gobj()), const_cast<GtkToolItem*>((item).gobj()));
}

guint ToolItemGroup::get_n_items() const
{
  return gtk_tool_item_group_get_n_items(const_cast<GtkToolItemGroup*>(gobj()));
}

ToolItem* ToolItemGroup::get_nth_item(guint index)
{
  return Glib::wrap(gtk_tool_item_group_get_nth_item(gobj(), index));
}

const ToolItem* ToolItemGroup::get_nth_item(guint index) const
{
  return const_cast<ToolItemGroup*>(this)->get_nth_item(index);
}

ToolItem* ToolItemGroup::get_drop_item(int x, int y)
{
  return Glib::wrap(gtk_tool_item_group_get_drop_item(gobj(), x, y));
}

ToolItem* ToolItemGroup::get_drop_item(int x, int y) const
{
  return const_cast<ToolItemGroup*>(this)->get_drop_item(x, y);
}


Glib::PropertyProxy< Glib::ustring > ToolItemGroup::property_label() 
{
  return Glib::PropertyProxy< Glib::ustring >(this, "label");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > ToolItemGroup::property_label() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "label");
}

Glib::PropertyProxy< Gtk::Widget* > ToolItemGroup::property_label_widget() 
{
  return Glib::PropertyProxy< Gtk::Widget* >(this, "label-widget");
}

Glib::PropertyProxy_ReadOnly< Gtk::Widget* > ToolItemGroup::property_label_widget() const
{
  return Glib::PropertyProxy_ReadOnly< Gtk::Widget* >(this, "label-widget");
}

Glib::PropertyProxy< bool > ToolItemGroup::property_collapsed() 
{
  return Glib::PropertyProxy< bool >(this, "collapsed");
}

Glib::PropertyProxy_ReadOnly< bool > ToolItemGroup::property_collapsed() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "collapsed");
}

Glib::PropertyProxy< Pango::EllipsizeMode > ToolItemGroup::property_ellipsize() 
{
  return Glib::PropertyProxy< Pango::EllipsizeMode >(this, "ellipsize");
}

Glib::PropertyProxy_ReadOnly< Pango::EllipsizeMode > ToolItemGroup::property_ellipsize() const
{
  return Glib::PropertyProxy_ReadOnly< Pango::EllipsizeMode >(this, "ellipsize");
}

Glib::PropertyProxy< ReliefStyle > ToolItemGroup::property_header_relief() 
{
  return Glib::PropertyProxy< ReliefStyle >(this, "header-relief");
}

Glib::PropertyProxy_ReadOnly< ReliefStyle > ToolItemGroup::property_header_relief() const
{
  return Glib::PropertyProxy_ReadOnly< ReliefStyle >(this, "header-relief");
}


} // namespace Gtk


