// Generated by gmmproc 2.45.3 -- DO NOT MODIFY!


#include <glibmm.h>

#include <ytkmm/uimanager.h>
#include <ytkmm/private/uimanager_p.h>


// -*- c++ -*-
/* $Id: uimanager.ccg,v 1.9 2006/11/24 19:09:39 jhs Exp $ */

/* Copyright 2003 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <ytk/ytk.h>


namespace Gtk
{

typedef UIManager::ui_merge_id ui_merge_id; //Help gmmproc so that it does not need to add the full type name for the return type.

UIManager::ui_merge_id UIManager::add_ui_from_string(const Glib::ustring& buffer)
{
  GError* gerror = 0;
  guint retvalue = gtk_ui_manager_add_ui_from_string(gobj(), buffer.c_str(), buffer.size(), &(gerror));

  if (gerror)
  { 
  ::Glib::Error::throw_exception(gerror);
  }
  return retvalue;
}

void UIManager::add_ui_separator(ui_merge_id merge_id, const Glib::ustring& path, const Glib::ustring& name, UIManagerItemType type, bool top)
{
  gtk_ui_manager_add_ui(gobj(), merge_id, path.c_str(), name.c_str(), 0 /* See C docs */, ((GtkUIManagerItemType)(type)), static_cast<int>(top));
}


} // namespace Gtk


namespace
{


static void UIManager_signal_add_widget_callback(GtkUIManager* self, GtkWidget* p0,void* data)
{
  using namespace Gtk;
  typedef sigc::slot< void,Widget* > SlotType;

  UIManager* obj = dynamic_cast<UIManager*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(Glib::wrap(p0)
);
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
  }
}

static const Glib::SignalProxyInfo UIManager_signal_add_widget_info =
{
  "add_widget",
  (GCallback) &UIManager_signal_add_widget_callback,
  (GCallback) &UIManager_signal_add_widget_callback
};


static const Glib::SignalProxyInfo UIManager_signal_actions_changed_info =
{
  "actions_changed",
  (GCallback) &Glib::SignalProxyNormal::slot0_void_callback,
  (GCallback) &Glib::SignalProxyNormal::slot0_void_callback
};


static void UIManager_signal_connect_proxy_callback(GtkUIManager* self, GtkAction* p0,GtkWidget* p1,void* data)
{
  using namespace Gtk;
  typedef sigc::slot< void,const Glib::RefPtr<Action>&,Widget* > SlotType;

  UIManager* obj = dynamic_cast<UIManager*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(Glib::wrap(p0, true)
, Glib::wrap(p1)
);
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
  }
}

static const Glib::SignalProxyInfo UIManager_signal_connect_proxy_info =
{
  "connect_proxy",
  (GCallback) &UIManager_signal_connect_proxy_callback,
  (GCallback) &UIManager_signal_connect_proxy_callback
};


static void UIManager_signal_disconnect_proxy_callback(GtkUIManager* self, GtkAction* p0,GtkWidget* p1,void* data)
{
  using namespace Gtk;
  typedef sigc::slot< void,const Glib::RefPtr<Action>&,Widget* > SlotType;

  UIManager* obj = dynamic_cast<UIManager*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(Glib::wrap(p0, true)
, Glib::wrap(p1)
);
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
  }
}

static const Glib::SignalProxyInfo UIManager_signal_disconnect_proxy_info =
{
  "disconnect_proxy",
  (GCallback) &UIManager_signal_disconnect_proxy_callback,
  (GCallback) &UIManager_signal_disconnect_proxy_callback
};


static void UIManager_signal_pre_activate_callback(GtkUIManager* self, GtkAction* p0,void* data)
{
  using namespace Gtk;
  typedef sigc::slot< void,const Glib::RefPtr<Action>& > SlotType;

  UIManager* obj = dynamic_cast<UIManager*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(Glib::wrap(p0, true)
);
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
  }
}

static const Glib::SignalProxyInfo UIManager_signal_pre_activate_info =
{
  "pre_activate",
  (GCallback) &UIManager_signal_pre_activate_callback,
  (GCallback) &UIManager_signal_pre_activate_callback
};


static void UIManager_signal_post_activate_callback(GtkUIManager* self, GtkAction* p0,void* data)
{
  using namespace Gtk;
  typedef sigc::slot< void,const Glib::RefPtr<Action>& > SlotType;

  UIManager* obj = dynamic_cast<UIManager*>(Glib::ObjectBase::_get_current_wrapper((GObject*) self));
  // Do not try to call a signal on a disassociated wrapper.
  if(obj)
  {
    try
    {
      if(sigc::slot_base *const slot = Glib::SignalProxyNormal::data_to_slot(data))
        (*static_cast<SlotType*>(slot))(Glib::wrap(p0, true)
);
    }
    catch(...)
    {
       Glib::exception_handlers_invoke();
    }
  }
}

static const Glib::SignalProxyInfo UIManager_signal_post_activate_info =
{
  "post_activate",
  (GCallback) &UIManager_signal_post_activate_callback,
  (GCallback) &UIManager_signal_post_activate_callback
};


} // anonymous namespace

// static
GType Glib::Value<Gtk::UIManagerItemType>::value_type()
{
  return gtk_ui_manager_item_type_get_type();
}


namespace Glib
{

Glib::RefPtr<Gtk::UIManager> wrap(GtkUIManager* object, bool take_copy)
{
  return Glib::RefPtr<Gtk::UIManager>( dynamic_cast<Gtk::UIManager*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Gtk
{


/* The *_Class implementation: */

const Glib::Class& UIManager_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &UIManager_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_ui_manager_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void UIManager_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


  klass->add_widget = &add_widget_callback;
  klass->actions_changed = &actions_changed_callback;
}


void UIManager_Class::add_widget_callback(GtkUIManager* self, GtkWidget* p0)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        obj->on_add_widget(Glib::wrap(p0)
);
        return;
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
        g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
    );

  // Call the original underlying C function:
  if(base && base->add_widget)
    (*base->add_widget)(self, p0);
}
void UIManager_Class::actions_changed_callback(GtkUIManager* self)
{
  Glib::ObjectBase *const obj_base = static_cast<Glib::ObjectBase*>(
      Glib::ObjectBase::_get_current_wrapper((GObject*)self));

  // Non-gtkmmproc-generated custom classes implicitly call the default
  // Glib::ObjectBase constructor, which sets is_derived_. But gtkmmproc-
  // generated classes can use this optimisation, which avoids the unnecessary
  // parameter conversions if there is no possibility of the virtual function
  // being overridden:
  if(obj_base && obj_base->is_derived_())
  {
    CppObjectType *const obj = dynamic_cast<CppObjectType* const>(obj_base);
    if(obj) // This can be NULL during destruction.
    {
      try // Trap C++ exceptions which would normally be lost because this is a C callback.
      {
        // Call the virtual member method, which derived classes might override.
        obj->on_actions_changed();
        return;
      }
      catch(...)
      {
        Glib::exception_handlers_invoke();
      }
    }
  }

  BaseClassType *const base = static_cast<BaseClassType*>(
        g_type_class_peek_parent(G_OBJECT_GET_CLASS(self)) // Get the parent class of the object class (The original underlying C class).
    );

  // Call the original underlying C function:
  if(base && base->actions_changed)
    (*base->actions_changed)(self);
}


Glib::ObjectBase* UIManager_Class::wrap_new(GObject* object)
{
  return new UIManager((GtkUIManager*)object);
}


/* The implementation: */

GtkUIManager* UIManager::gobj_copy()
{
  reference();
  return gobj();
}

UIManager::UIManager(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{

}

UIManager::UIManager(GtkUIManager* castitem)
:
  Glib::Object((GObject*)(castitem))
{}


UIManager::~UIManager()
{}


UIManager::CppClassType UIManager::uimanager_class_; // initialize static member

GType UIManager::get_type()
{
  return uimanager_class_.init().get_type();
}


GType UIManager::get_base_type()
{
  return gtk_ui_manager_get_type();
}


UIManager::UIManager()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Glib::Object(Glib::ConstructParams(uimanager_class_.init()))
{
  

}

Glib::RefPtr<UIManager> UIManager::create()
{
  return Glib::RefPtr<UIManager>( new UIManager() );
}

void UIManager::set_add_tearoffs(bool add_tearoffs)
{
  gtk_ui_manager_set_add_tearoffs(gobj(), static_cast<int>(add_tearoffs));
}

bool UIManager::get_add_tearoffs() const
{
  return gtk_ui_manager_get_add_tearoffs(const_cast<GtkUIManager*>(gobj()));
}

void UIManager::insert_action_group(const Glib::RefPtr<ActionGroup>& action_group, int pos)
{
  gtk_ui_manager_insert_action_group(gobj(), Glib::unwrap(action_group), pos);
}

void UIManager::remove_action_group(const Glib::RefPtr<ActionGroup>& action_group)
{
  gtk_ui_manager_remove_action_group(gobj(), Glib::unwrap(action_group));
}

Glib::ListHandle< Glib::RefPtr<ActionGroup> > UIManager::get_action_groups()
{
  return Glib::ListHandle< Glib::RefPtr<ActionGroup> >(gtk_ui_manager_get_action_groups(gobj()), Glib::OWNERSHIP_NONE);
}

Glib::ListHandle< Glib::RefPtr<const ActionGroup> > UIManager::get_action_groups() const
{
  return Glib::ListHandle< Glib::RefPtr<const ActionGroup> >(gtk_ui_manager_get_action_groups(const_cast<GtkUIManager*>(gobj())), Glib::OWNERSHIP_SHALLOW);
}

Glib::RefPtr<AccelGroup> UIManager::get_accel_group()
{
  Glib::RefPtr<AccelGroup> retvalue = Glib::wrap(gtk_ui_manager_get_accel_group(gobj()));
  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;
}

Glib::RefPtr<const AccelGroup> UIManager::get_accel_group() const
{
  return const_cast<UIManager*>(this)->get_accel_group();
}

Widget* UIManager::get_widget(const Glib::ustring& path)
{
  return Glib::wrap(gtk_ui_manager_get_widget(gobj(), path.c_str()));
}

const Widget* UIManager::get_widget(const Glib::ustring& path) const
{
  return const_cast<UIManager*>(this)->get_widget(path);
}

Glib::SListHandle<Widget*> UIManager::get_toplevels(UIManagerItemType types)
{
  return Glib::SListHandle<Widget*>(gtk_ui_manager_get_toplevels(gobj(), ((GtkUIManagerItemType)(types))), Glib::OWNERSHIP_SHALLOW);
}

Glib::SListHandle<const Widget*> UIManager::get_toplevels(UIManagerItemType types) const
{
  return Glib::SListHandle<const Widget*>(gtk_ui_manager_get_toplevels(const_cast<GtkUIManager*>(gobj()), ((GtkUIManagerItemType)(types))), Glib::OWNERSHIP_SHALLOW);
}

Glib::RefPtr<Action> UIManager::get_action(const Glib::ustring& path)
{
  Glib::RefPtr<Action> retvalue = Glib::wrap(gtk_ui_manager_get_action(gobj(), path.c_str()));
  if(retvalue)
    retvalue->reference(); //The function does not do a ref for us.
  return retvalue;
}

Glib::RefPtr<const Action> UIManager::get_action(const Glib::ustring& path) const
{
  return const_cast<UIManager*>(this)->get_action(path);
}

ui_merge_id UIManager::add_ui_from_file(const Glib::ustring& filename)
{
  GError* gerror = 0;
  ui_merge_id retvalue = gtk_ui_manager_add_ui_from_file(gobj(), filename.c_str(), &(gerror));
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
  return retvalue;
}

void UIManager::add_ui(ui_merge_id merge_id, const Glib::ustring& path, const Glib::ustring& name, const Glib::ustring& action, UIManagerItemType type, bool top)
{
  gtk_ui_manager_add_ui(gobj(), merge_id, path.c_str(), name.c_str(), action.c_str(), ((GtkUIManagerItemType)(type)), static_cast<int>(top));
}

void UIManager::remove_ui(ui_merge_id merge_id)
{
  gtk_ui_manager_remove_ui(gobj(), merge_id);
}

Glib::ustring UIManager::get_ui() const
{
  return Glib::convert_return_gchar_ptr_to_ustring(gtk_ui_manager_get_ui(const_cast<GtkUIManager*>(gobj())));
}

void UIManager::ensure_update()
{
  gtk_ui_manager_ensure_update(gobj());
}

ui_merge_id UIManager::new_merge_id()
{
  return gtk_ui_manager_new_merge_id(gobj());
}


Glib::SignalProxy1< void,Widget* > UIManager::signal_add_widget()
{
  return Glib::SignalProxy1< void,Widget* >(this, &UIManager_signal_add_widget_info);
}


Glib::SignalProxy0< void > UIManager::signal_actions_changed()
{
  return Glib::SignalProxy0< void >(this, &UIManager_signal_actions_changed_info);
}


Glib::SignalProxy2< void,const Glib::RefPtr<Action>&,Widget* > UIManager::signal_connect_proxy()
{
  return Glib::SignalProxy2< void,const Glib::RefPtr<Action>&,Widget* >(this, &UIManager_signal_connect_proxy_info);
}


Glib::SignalProxy2< void,const Glib::RefPtr<Action>&,Widget* > UIManager::signal_disconnect_proxy()
{
  return Glib::SignalProxy2< void,const Glib::RefPtr<Action>&,Widget* >(this, &UIManager_signal_disconnect_proxy_info);
}


Glib::SignalProxy1< void,const Glib::RefPtr<Action>& > UIManager::signal_pre_activate()
{
  return Glib::SignalProxy1< void,const Glib::RefPtr<Action>& >(this, &UIManager_signal_pre_activate_info);
}


Glib::SignalProxy1< void,const Glib::RefPtr<Action>& > UIManager::signal_post_activate()
{
  return Glib::SignalProxy1< void,const Glib::RefPtr<Action>& >(this, &UIManager_signal_post_activate_info);
}


Glib::PropertyProxy< bool > UIManager::property_add_tearoffs() 
{
  return Glib::PropertyProxy< bool >(this, "add-tearoffs");
}

Glib::PropertyProxy_ReadOnly< bool > UIManager::property_add_tearoffs() const
{
  return Glib::PropertyProxy_ReadOnly< bool >(this, "add-tearoffs");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > UIManager::property_ui() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "ui");
}


void Gtk::UIManager::on_add_widget(Widget* widget)
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->add_widget)
    (*base->add_widget)(gobj(),(GtkWidget*)Glib::unwrap(widget));
}
void Gtk::UIManager::on_actions_changed()
{
  BaseClassType *const base = static_cast<BaseClassType*>(
      g_type_class_peek_parent(G_OBJECT_GET_CLASS(gobject_)) // Get the parent class of the object class (The original underlying C class).
  );

  if(base && base->actions_changed)
    (*base->actions_changed)(gobj());
}


} // namespace Gtk


