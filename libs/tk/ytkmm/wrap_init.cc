// Generated by generate_wrap_init.pl -- DO NOT MODIFY!

#define GLIBMM_INCLUDED_FROM_WRAP_INIT_CC
#include <glibmm.h>

// Disable the 'const' function attribute of the get_type() functions.
// GCC would optimize them out because we don't use the return value.
#undef  G_GNUC_CONST
#define G_GNUC_CONST /* empty */

#include <ytkmm/wrap_init.h>
#include <glibmm/error.h>
#include <glibmm/object.h>

// #include the widget headers so that we can call the get_type() static methods:
#include "ytkmm/aboutdialog.h"
#include "ytkmm/accelgroup.h"
#include "ytkmm/accellabel.h"
#include "ytkmm/action.h"
#include "ytkmm/actiongroup.h"
#include "ytkmm/activatable.h"
#include "ytkmm/adjustment.h"
#include "ytkmm/alignment.h"
#include "ytkmm/arrow.h"
#include "ytkmm/aspectframe.h"
#include "ytkmm/assistant.h"
#include "ytkmm/bin.h"
#include "ytkmm/box.h"
#include "ytkmm/builder.h"
#include "ytkmm/button.h"
#include "ytkmm/buttonbox.h"
#include "ytkmm/celleditable.h"
#include "ytkmm/celllayout.h"
#include "ytkmm/cellrenderer.h"
#include "ytkmm/cellrendereraccel.h"
#include "ytkmm/cellrenderercombo.h"
#include "ytkmm/cellrendererpixbuf.h"
#include "ytkmm/cellrendererprogress.h"
#include "ytkmm/cellrendererspin.h"
#include "ytkmm/cellrendererspinner.h"
#include "ytkmm/cellrenderertext.h"
#include "ytkmm/cellrenderertoggle.h"
#include "ytkmm/cellview.h"
#include "ytkmm/checkbutton.h"
#include "ytkmm/checkmenuitem.h"
#include "ytkmm/clipboard.h"
#include "ytkmm/colorbutton.h"
#include "ytkmm/colorselection.h"
#include "ytkmm/combobox.h"
#ifndef GTKMM_DISABLE_DEPRECATED
#include "ytkmm/comboboxentry.h"
#endif // *_DISABLE_DEPRECATED
#include "ytkmm/container.h"
#include "ytkmm/dialog.h"
#include "ytkmm/drawingarea.h"
#include "ytkmm/editable.h"
#include "ytkmm/entry.h"
#include "ytkmm/entrybuffer.h"
#include "ytkmm/entrycompletion.h"
#include "ytkmm/enums.h"
#include "ytkmm/eventbox.h"
#include "ytkmm/expander.h"
#include "ytkmm/filechooser.h"
#include "ytkmm/filechooserbutton.h"
#include "ytkmm/filechooserdialog.h"
#include "ytkmm/filechooserwidget.h"
#include "ytkmm/filefilter.h"
#include "ytkmm/fixed.h"
#include "ytkmm/fontbutton.h"
#include "ytkmm/fontselection.h"
#include "ytkmm/frame.h"
#include "ytkmm/handlebox.h"
#include "ytkmm/iconfactory.h"
#include "ytkmm/iconinfo.h"
#include "ytkmm/iconset.h"
#include "ytkmm/iconsource.h"
#include "ytkmm/icontheme.h"
#include "ytkmm/iconview.h"
#include "ytkmm/image.h"
#include "ytkmm/imagemenuitem.h"
#include "ytkmm/infobar.h"
#include "ytkmm/invisible.h"
#include "ytkmm/item.h"
#include "ytkmm/label.h"
#include "ytkmm/layout.h"
#include "ytkmm/linkbutton.h"
#include "ytkmm/liststore.h"
#include "ytkmm/main.h"
#include "ytkmm/menu.h"
#include "ytkmm/menubar.h"
#include "ytkmm/menuitem.h"
#include "ytkmm/menushell.h"
#include "ytkmm/menutoolbutton.h"
#include "ytkmm/messagedialog.h"
#include "ytkmm/misc.h"
#include "ytkmm/notebook.h"
#include "ytkmm/object.h"
#include "ytkmm/offscreenwindow.h"
#ifndef GTKMM_DISABLE_DEPRECATED
#include "ytkmm/optionmenu.h"
#endif // *_DISABLE_DEPRECATED
#include "ytkmm/orientable.h"
#include "ytkmm/paned.h"
#ifndef G_OS_WIN32
#include "ytkmm/plug.h"
#endif
#include "ytkmm/progressbar.h"
#include "ytkmm/radioaction.h"
#include "ytkmm/radiobutton.h"
#include "ytkmm/radiomenuitem.h"
#include "ytkmm/radiotoolbutton.h"
#include "ytkmm/range.h"
#include "ytkmm/rc.h"
#include "ytkmm/recentaction.h"
#include "ytkmm/recentchooser.h"
#include "ytkmm/recentchooserdialog.h"
#include "ytkmm/recentchoosermenu.h"
#include "ytkmm/recentchooserwidget.h"
#include "ytkmm/recentfilter.h"
#include "ytkmm/recentinfo.h"
#include "ytkmm/recentmanager.h"
#ifndef GTKMM_DISABLE_DEPRECATED
#include "ytkmm/ruler.h"
#endif // *_DISABLE_DEPRECATED
#include "ytkmm/scale.h"
#include "ytkmm/scalebutton.h"
#include "ytkmm/scrollbar.h"
#include "ytkmm/scrolledwindow.h"
#include "ytkmm/selectiondata.h"
#include "ytkmm/separator.h"
#include "ytkmm/separatormenuitem.h"
#include "ytkmm/separatortoolitem.h"
#include "ytkmm/settings.h"
#include "ytkmm/sizegroup.h"
#ifndef G_OS_WIN32
#include "ytkmm/socket.h"
#endif
#include "ytkmm/spinbutton.h"
#include "ytkmm/spinner.h"
#include "ytkmm/statusbar.h"
#include "ytkmm/stockitem.h"
#include "ytkmm/style.h"
#include "ytkmm/table.h"
#include "ytkmm/targetlist.h"
#include "ytkmm/tearoffmenuitem.h"
#include "ytkmm/textattributes.h"
#include "ytkmm/textbuffer.h"
#include "ytkmm/textchildanchor.h"
#include "ytkmm/textiter.h"
#include "ytkmm/textmark.h"
#include "ytkmm/texttag.h"
#include "ytkmm/texttagtable.h"
#include "ytkmm/textview.h"
#include "ytkmm/toggleaction.h"
#include "ytkmm/togglebutton.h"
#include "ytkmm/toggletoolbutton.h"
#include "ytkmm/toolbar.h"
#include "ytkmm/toolbutton.h"
#include "ytkmm/toolitem.h"
#include "ytkmm/toolitemgroup.h"
#include "ytkmm/toolpalette.h"
#include "ytkmm/toolshell.h"
#include "ytkmm/tooltip.h"
#ifndef GTKMM_DISABLE_DEPRECATED
#include "ytkmm/tooltips.h"
#endif // *_DISABLE_DEPRECATED
#include "ytkmm/treedragdest.h"
#include "ytkmm/treedragsource.h"
#include "ytkmm/treeiter.h"
#include "ytkmm/treemodel.h"
#include "ytkmm/treemodelfilter.h"
#include "ytkmm/treemodelsort.h"
#include "ytkmm/treepath.h"
#include "ytkmm/treerowreference.h"
#include "ytkmm/treeselection.h"
#include "ytkmm/treesortable.h"
#include "ytkmm/treestore.h"
#include "ytkmm/treeview.h"
#include "ytkmm/treeviewcolumn.h"
#include "ytkmm/uimanager.h"
#include "ytkmm/viewport.h"
#include "ytkmm/widget.h"
#include "ytkmm/window.h"

extern "C"
{
//Declarations of the *_get_type() functions:

GType gtk_about_dialog_get_type(void);
GType gtk_accel_group_get_type(void);
GType gtk_accel_label_get_type(void);
GType gtk_action_get_type(void);
GType gtk_action_group_get_type(void);
GType gtk_adjustment_get_type(void);
GType gtk_alignment_get_type(void);
GType gtk_arrow_get_type(void);
GType gtk_aspect_frame_get_type(void);
GType gtk_assistant_get_type(void);
GType gtk_bin_get_type(void);
GType gtk_box_get_type(void);
GType gtk_vbox_get_type(void);
GType gtk_hbox_get_type(void);
GType gtk_builder_get_type(void);
GType gtk_button_get_type(void);
GType gtk_button_box_get_type(void);
GType gtk_vbutton_box_get_type(void);
GType gtk_hbutton_box_get_type(void);
GType gtk_cell_renderer_get_type(void);
GType gtk_cell_renderer_accel_get_type(void);
GType gtk_cell_renderer_combo_get_type(void);
GType gtk_cell_renderer_pixbuf_get_type(void);
GType gtk_cell_renderer_progress_get_type(void);
GType gtk_cell_renderer_spin_get_type(void);
GType gtk_cell_renderer_spinner_get_type(void);
GType gtk_cell_renderer_text_get_type(void);
GType gtk_cell_renderer_toggle_get_type(void);
GType gtk_cell_view_get_type(void);
GType gtk_check_button_get_type(void);
GType gtk_check_menu_item_get_type(void);
GType gtk_clipboard_get_type(void);
GType gtk_color_button_get_type(void);
GType gtk_color_selection_get_type(void);
GType gtk_color_selection_dialog_get_type(void);
GType gtk_combo_box_get_type(void);
#ifndef GTKMM_DISABLE_DEPRECATED
GType gtk_combo_box_entry_get_type(void);
#endif // *_DISABLE_DEPRECATED
GType gtk_container_get_type(void);
GType gtk_dialog_get_type(void);
GType gtk_drawing_area_get_type(void);
GType gtk_entry_get_type(void);
GType gtk_entry_buffer_get_type(void);
GType gtk_entry_completion_get_type(void);
GType gtk_event_box_get_type(void);
GType gtk_expander_get_type(void);
GType gtk_file_chooser_button_get_type(void);
GType gtk_file_chooser_dialog_get_type(void);
GType gtk_file_chooser_widget_get_type(void);
GType gtk_file_filter_get_type(void);
#ifndef GTKMM_DISABLE_DEPRECATED
GType gtk_file_selection_get_type(void);
#endif // *_DISABLE_DEPRECATED
GType gtk_fixed_get_type(void);
GType gtk_font_button_get_type(void);
GType gtk_font_selection_get_type(void);
GType gtk_font_selection_dialog_get_type(void);
GType gtk_frame_get_type(void);
GType gtk_handle_box_get_type(void);
GType gtk_icon_factory_get_type(void);
GType gtk_icon_theme_get_type(void);
GType gtk_icon_view_get_type(void);
GType gtk_image_get_type(void);
GType gtk_image_menu_item_get_type(void);
GType gtk_info_bar_get_type(void);
GType gtk_invisible_get_type(void);
GType gtk_item_get_type(void);
GType gtk_label_get_type(void);
GType gtk_layout_get_type(void);
GType gtk_link_button_get_type(void);
GType gtk_list_store_get_type(void);
GType gtk_menu_get_type(void);
GType gtk_menu_bar_get_type(void);
GType gtk_menu_item_get_type(void);
GType gtk_menu_shell_get_type(void);
GType gtk_menu_tool_button_get_type(void);
GType gtk_message_dialog_get_type(void);
GType gtk_misc_get_type(void);
GType gtk_notebook_get_type(void);
GType gtk_object_get_type(void);
GType gtk_offscreen_window_get_type(void);
#ifndef GTKMM_DISABLE_DEPRECATED
GType gtk_option_menu_get_type(void);
#endif // *_DISABLE_DEPRECATED
GType gtk_paned_get_type(void);
GType gtk_hpaned_get_type(void);
GType gtk_vpaned_get_type(void);
#ifndef G_OS_WIN32
GType gtk_plug_get_type(void);
#endif // ifndef G_OS_WIN32
GType gtk_print_context_get_type(void);
GType gtk_print_operation_get_type(void);
GType gtk_print_settings_get_type(void);
GType gtk_progress_bar_get_type(void);
GType gtk_radio_action_get_type(void);
GType gtk_radio_button_get_type(void);
GType gtk_radio_menu_item_get_type(void);
GType gtk_radio_tool_button_get_type(void);
GType gtk_range_get_type(void);
GType gtk_rc_style_get_type(void);
GType gtk_recent_action_get_type(void);
GType gtk_recent_chooser_dialog_get_type(void);
GType gtk_recent_chooser_menu_get_type(void);
GType gtk_recent_chooser_widget_get_type(void);
GType gtk_recent_filter_get_type(void);
GType gtk_recent_manager_get_type(void);
#ifndef GTKMM_DISABLE_DEPRECATED
GType gtk_ruler_get_type(void);
GType gtk_vruler_get_type(void);
GType gtk_hruler_get_type(void);
#endif // *_DISABLE_DEPRECATED
GType gtk_scale_get_type(void);
GType gtk_vscale_get_type(void);
GType gtk_hscale_get_type(void);
GType gtk_scale_button_get_type(void);
GType gtk_scrollbar_get_type(void);
GType gtk_vscrollbar_get_type(void);
GType gtk_hscrollbar_get_type(void);
GType gtk_scrolled_window_get_type(void);
GType gtk_separator_get_type(void);
GType gtk_vseparator_get_type(void);
GType gtk_hseparator_get_type(void);
GType gtk_separator_menu_item_get_type(void);
GType gtk_separator_tool_item_get_type(void);
GType gtk_settings_get_type(void);
GType gtk_size_group_get_type(void);
#ifndef G_OS_WIN32
GType gtk_socket_get_type(void);
#endif // ifndef G_OS_WIN32
GType gtk_spin_button_get_type(void);
GType gtk_spinner_get_type(void);
GType gtk_statusbar_get_type(void);
GType gtk_style_get_type(void);
GType gtk_table_get_type(void);
GType gtk_tearoff_menu_item_get_type(void);
GType gtk_text_buffer_get_type(void);
GType gtk_text_child_anchor_get_type(void);
GType gtk_text_mark_get_type(void);
GType gtk_text_tag_get_type(void);
GType gtk_text_tag_table_get_type(void);
GType gtk_text_view_get_type(void);
GType gtk_toggle_action_get_type(void);
GType gtk_toggle_button_get_type(void);
GType gtk_toggle_tool_button_get_type(void);
GType gtk_toolbar_get_type(void);
GType gtk_tool_button_get_type(void);
GType gtk_tool_item_get_type(void);
GType gtk_tool_item_group_get_type(void);
GType gtk_tool_palette_get_type(void);
GType gtk_tooltip_get_type(void);
#ifndef GTKMM_DISABLE_DEPRECATED
GType gtk_tooltips_get_type(void);
#endif // *_DISABLE_DEPRECATED
GType gtk_tree_model_filter_get_type(void);
GType gtk_tree_model_sort_get_type(void);
GType gtk_tree_selection_get_type(void);
GType gtk_tree_store_get_type(void);
GType gtk_tree_view_get_type(void);
GType gtk_tree_view_column_get_type(void);
GType gtk_ui_manager_get_type(void);
GType gtk_viewport_get_type(void);
GType gtk_widget_get_type(void);
GType gtk_window_group_get_type(void);
GType gtk_window_get_type(void);

//Declarations of the *_error_quark() functions:

GQuark gtk_builder_error_quark(void);
GQuark gtk_file_chooser_error_quark(void);
GQuark gtk_icon_theme_error_quark(void);
GQuark gtk_print_error_quark(void);
GQuark gtk_recent_chooser_error_quark(void);
GQuark gtk_recent_manager_error_quark(void);
} // extern "C"

namespace Gtk {

//Declarations of the *_Class::wrap_new() methods, instead of including all the private headers:

class AboutDialog_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class AccelGroup_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class AccelLabel_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Action_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class ActionGroup_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Adjustment_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Alignment_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Arrow_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class AspectFrame_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Assistant_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Bin_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Box_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class VBox_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class HBox_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Builder_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Button_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class ButtonBox_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class VButtonBox_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class HButtonBox_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class CellRenderer_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class CellRendererAccel_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class CellRendererCombo_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class CellRendererPixbuf_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class CellRendererProgress_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class CellRendererSpin_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class CellRendererSpinner_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class CellRendererText_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class CellRendererToggle_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class CellView_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class CheckButton_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class CheckMenuItem_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Clipboard_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class ColorButton_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class ColorSelection_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class ColorSelectionDialog_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class ComboBox_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
#ifndef GTKMM_DISABLE_DEPRECATED
class ComboBoxEntry_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
#endif // *_DISABLE_DEPRECATED
class Container_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Dialog_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class DrawingArea_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Entry_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class EntryBuffer_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class EntryCompletion_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class EventBox_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Expander_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class FileChooserButton_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class FileChooserDialog_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class FileChooserWidget_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class FileFilter_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Fixed_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class FontButton_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class FontSelection_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class FontSelectionDialog_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Frame_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class HandleBox_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class IconFactory_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class IconTheme_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class IconView_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Image_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class ImageMenuItem_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class InfoBar_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
#ifndef GTKMM_DISABLE_DEPRECATED
class InputDialog_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
#endif // *_DISABLE_DEPRECATED
class Invisible_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Item_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Label_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Layout_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class LinkButton_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class ListStore_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Menu_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class MenuBar_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class MenuItem_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class MenuShell_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class MenuToolButton_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class MessageDialog_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Misc_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Notebook_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Object_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class OffscreenWindow_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
#ifndef GTKMM_DISABLE_DEPRECATED
class OptionMenu_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
#endif // *_DISABLE_DEPRECATED
class Paned_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class HPaned_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class VPaned_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
#ifndef G_OS_WIN32
class Plug_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
#endif // ifndef G_OS_WIN32
class PrintOperation_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class PrintSettings_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class ProgressBar_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class RadioAction_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class RadioButton_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class RadioMenuItem_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class RadioToolButton_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Range_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class RcStyle_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class RecentAction_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class RecentChooserDialog_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class RecentChooserMenu_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class RecentChooserWidget_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class RecentFilter_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class RecentManager_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
#ifndef GTKMM_DISABLE_DEPRECATED
class Ruler_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class VRuler_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class HRuler_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
#endif // *_DISABLE_DEPRECATED
class Scale_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class VScale_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class HScale_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class ScaleButton_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Scrollbar_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class VScrollbar_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class HScrollbar_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class ScrolledWindow_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Separator_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class VSeparator_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class HSeparator_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class SeparatorMenuItem_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class SeparatorToolItem_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Settings_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class SizeGroup_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
#ifndef G_OS_WIN32
class Socket_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
#endif // ifndef G_OS_WIN32
class SpinButton_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Spinner_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Statusbar_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Style_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Table_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class TearoffMenuItem_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class TextBuffer_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class TextChildAnchor_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class TextMark_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class TextTag_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class TextTagTable_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class TextView_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class ToggleAction_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class ToggleButton_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class ToggleToolButton_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Toolbar_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class ToolButton_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class ToolItem_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class ToolItemGroup_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class ToolPalette_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Tooltip_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
#ifndef GTKMM_DISABLE_DEPRECATED
class Tooltips_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
#endif // *_DISABLE_DEPRECATED
class TreeModelFilter_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class TreeModelSort_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class TreeSelection_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class TreeStore_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class TreeView_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class TreeViewColumn_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class UIManager_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Viewport_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Widget_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class WindowGroup_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Window_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };

void wrap_init()
{
  // Register Error domains in the main namespace:
  Glib::Error::register_domain(gtk_builder_error_quark(), &BuilderError::throw_func);
  Glib::Error::register_domain(gtk_file_chooser_error_quark(), &FileChooserError::throw_func);
  Glib::Error::register_domain(gtk_icon_theme_error_quark(), &IconThemeError::throw_func);
  Glib::Error::register_domain(gtk_recent_chooser_error_quark(), &RecentChooserError::throw_func);
  Glib::Error::register_domain(gtk_recent_manager_error_quark(), &RecentManagerError::throw_func);

  // Map gtypes to gtkmm wrapper-creation functions:
  Glib::wrap_register(gtk_about_dialog_get_type(), &AboutDialog_Class::wrap_new);
  Glib::wrap_register(gtk_accel_group_get_type(), &AccelGroup_Class::wrap_new);
  Glib::wrap_register(gtk_accel_label_get_type(), &AccelLabel_Class::wrap_new);
  Glib::wrap_register(gtk_action_get_type(), &Action_Class::wrap_new);
  Glib::wrap_register(gtk_action_group_get_type(), &ActionGroup_Class::wrap_new);
  Glib::wrap_register(gtk_adjustment_get_type(), &Adjustment_Class::wrap_new);
  Glib::wrap_register(gtk_alignment_get_type(), &Alignment_Class::wrap_new);
  Glib::wrap_register(gtk_arrow_get_type(), &Arrow_Class::wrap_new);
  Glib::wrap_register(gtk_aspect_frame_get_type(), &AspectFrame_Class::wrap_new);
  Glib::wrap_register(gtk_assistant_get_type(), &Assistant_Class::wrap_new);
  Glib::wrap_register(gtk_bin_get_type(), &Bin_Class::wrap_new);
  Glib::wrap_register(gtk_box_get_type(), &Box_Class::wrap_new);
  Glib::wrap_register(gtk_vbox_get_type(), &VBox_Class::wrap_new);
  Glib::wrap_register(gtk_hbox_get_type(), &HBox_Class::wrap_new);
  Glib::wrap_register(gtk_builder_get_type(), &Builder_Class::wrap_new);
  Glib::wrap_register(gtk_button_get_type(), &Button_Class::wrap_new);
  Glib::wrap_register(gtk_button_box_get_type(), &ButtonBox_Class::wrap_new);
  Glib::wrap_register(gtk_vbutton_box_get_type(), &VButtonBox_Class::wrap_new);
  Glib::wrap_register(gtk_hbutton_box_get_type(), &HButtonBox_Class::wrap_new);
  Glib::wrap_register(gtk_cell_renderer_get_type(), &CellRenderer_Class::wrap_new);
  Glib::wrap_register(gtk_cell_renderer_accel_get_type(), &CellRendererAccel_Class::wrap_new);
  Glib::wrap_register(gtk_cell_renderer_combo_get_type(), &CellRendererCombo_Class::wrap_new);
  Glib::wrap_register(gtk_cell_renderer_pixbuf_get_type(), &CellRendererPixbuf_Class::wrap_new);
  Glib::wrap_register(gtk_cell_renderer_progress_get_type(), &CellRendererProgress_Class::wrap_new);
  Glib::wrap_register(gtk_cell_renderer_spin_get_type(), &CellRendererSpin_Class::wrap_new);
  Glib::wrap_register(gtk_cell_renderer_spinner_get_type(), &CellRendererSpinner_Class::wrap_new);
  Glib::wrap_register(gtk_cell_renderer_text_get_type(), &CellRendererText_Class::wrap_new);
  Glib::wrap_register(gtk_cell_renderer_toggle_get_type(), &CellRendererToggle_Class::wrap_new);
  Glib::wrap_register(gtk_cell_view_get_type(), &CellView_Class::wrap_new);
  Glib::wrap_register(gtk_check_button_get_type(), &CheckButton_Class::wrap_new);
  Glib::wrap_register(gtk_check_menu_item_get_type(), &CheckMenuItem_Class::wrap_new);
  Glib::wrap_register(gtk_clipboard_get_type(), &Clipboard_Class::wrap_new);
  Glib::wrap_register(gtk_color_button_get_type(), &ColorButton_Class::wrap_new);
  Glib::wrap_register(gtk_color_selection_get_type(), &ColorSelection_Class::wrap_new);
  Glib::wrap_register(gtk_color_selection_dialog_get_type(), &ColorSelectionDialog_Class::wrap_new);
  Glib::wrap_register(gtk_combo_box_get_type(), &ComboBox_Class::wrap_new);
#ifndef GTKMM_DISABLE_DEPRECATED
  Glib::wrap_register(gtk_combo_box_entry_get_type(), &ComboBoxEntry_Class::wrap_new);
#endif // *_DISABLE_DEPRECATED
  Glib::wrap_register(gtk_container_get_type(), &Container_Class::wrap_new);
  Glib::wrap_register(gtk_dialog_get_type(), &Dialog_Class::wrap_new);
  Glib::wrap_register(gtk_drawing_area_get_type(), &DrawingArea_Class::wrap_new);
  Glib::wrap_register(gtk_entry_get_type(), &Entry_Class::wrap_new);
  Glib::wrap_register(gtk_entry_buffer_get_type(), &EntryBuffer_Class::wrap_new);
  Glib::wrap_register(gtk_entry_completion_get_type(), &EntryCompletion_Class::wrap_new);
  Glib::wrap_register(gtk_event_box_get_type(), &EventBox_Class::wrap_new);
  Glib::wrap_register(gtk_expander_get_type(), &Expander_Class::wrap_new);
  Glib::wrap_register(gtk_file_chooser_button_get_type(), &FileChooserButton_Class::wrap_new);
  Glib::wrap_register(gtk_file_chooser_dialog_get_type(), &FileChooserDialog_Class::wrap_new);
  Glib::wrap_register(gtk_file_chooser_widget_get_type(), &FileChooserWidget_Class::wrap_new);
  Glib::wrap_register(gtk_file_filter_get_type(), &FileFilter_Class::wrap_new);
  Glib::wrap_register(gtk_fixed_get_type(), &Fixed_Class::wrap_new);
  Glib::wrap_register(gtk_font_button_get_type(), &FontButton_Class::wrap_new);
  Glib::wrap_register(gtk_font_selection_get_type(), &FontSelection_Class::wrap_new);
  Glib::wrap_register(gtk_font_selection_dialog_get_type(), &FontSelectionDialog_Class::wrap_new);
  Glib::wrap_register(gtk_frame_get_type(), &Frame_Class::wrap_new);
  Glib::wrap_register(gtk_handle_box_get_type(), &HandleBox_Class::wrap_new);
  Glib::wrap_register(gtk_icon_factory_get_type(), &IconFactory_Class::wrap_new);
  Glib::wrap_register(gtk_icon_theme_get_type(), &IconTheme_Class::wrap_new);
  Glib::wrap_register(gtk_icon_view_get_type(), &IconView_Class::wrap_new);
  Glib::wrap_register(gtk_image_get_type(), &Image_Class::wrap_new);
  Glib::wrap_register(gtk_image_menu_item_get_type(), &ImageMenuItem_Class::wrap_new);
  Glib::wrap_register(gtk_info_bar_get_type(), &InfoBar_Class::wrap_new);
  Glib::wrap_register(gtk_invisible_get_type(), &Invisible_Class::wrap_new);
  Glib::wrap_register(gtk_item_get_type(), &Item_Class::wrap_new);
  Glib::wrap_register(gtk_label_get_type(), &Label_Class::wrap_new);
  Glib::wrap_register(gtk_layout_get_type(), &Layout_Class::wrap_new);
  Glib::wrap_register(gtk_link_button_get_type(), &LinkButton_Class::wrap_new);
  Glib::wrap_register(gtk_list_store_get_type(), &ListStore_Class::wrap_new);
  Glib::wrap_register(gtk_menu_get_type(), &Menu_Class::wrap_new);
  Glib::wrap_register(gtk_menu_bar_get_type(), &MenuBar_Class::wrap_new);
  Glib::wrap_register(gtk_menu_item_get_type(), &MenuItem_Class::wrap_new);
  Glib::wrap_register(gtk_menu_shell_get_type(), &MenuShell_Class::wrap_new);
  Glib::wrap_register(gtk_menu_tool_button_get_type(), &MenuToolButton_Class::wrap_new);
  Glib::wrap_register(gtk_message_dialog_get_type(), &MessageDialog_Class::wrap_new);
  Glib::wrap_register(gtk_misc_get_type(), &Misc_Class::wrap_new);
  Glib::wrap_register(gtk_notebook_get_type(), &Notebook_Class::wrap_new);
  Glib::wrap_register(gtk_object_get_type(), &Object_Class::wrap_new);
  Glib::wrap_register(gtk_offscreen_window_get_type(), &OffscreenWindow_Class::wrap_new);
#ifndef GTKMM_DISABLE_DEPRECATED
  Glib::wrap_register(gtk_option_menu_get_type(), &OptionMenu_Class::wrap_new);
#endif // *_DISABLE_DEPRECATED
  Glib::wrap_register(gtk_paned_get_type(), &Paned_Class::wrap_new);
  Glib::wrap_register(gtk_hpaned_get_type(), &HPaned_Class::wrap_new);
  Glib::wrap_register(gtk_vpaned_get_type(), &VPaned_Class::wrap_new);
#ifndef G_OS_WIN32
  Glib::wrap_register(gtk_plug_get_type(), &Plug_Class::wrap_new);
#endif // ifndef G_OS_WIN32
  Glib::wrap_register(gtk_progress_bar_get_type(), &ProgressBar_Class::wrap_new);
  Glib::wrap_register(gtk_radio_action_get_type(), &RadioAction_Class::wrap_new);
  Glib::wrap_register(gtk_radio_button_get_type(), &RadioButton_Class::wrap_new);
  Glib::wrap_register(gtk_radio_menu_item_get_type(), &RadioMenuItem_Class::wrap_new);
  Glib::wrap_register(gtk_radio_tool_button_get_type(), &RadioToolButton_Class::wrap_new);
  Glib::wrap_register(gtk_range_get_type(), &Range_Class::wrap_new);
  Glib::wrap_register(gtk_rc_style_get_type(), &RcStyle_Class::wrap_new);
  Glib::wrap_register(gtk_recent_action_get_type(), &RecentAction_Class::wrap_new);
  Glib::wrap_register(gtk_recent_chooser_dialog_get_type(), &RecentChooserDialog_Class::wrap_new);
  Glib::wrap_register(gtk_recent_chooser_menu_get_type(), &RecentChooserMenu_Class::wrap_new);
  Glib::wrap_register(gtk_recent_chooser_widget_get_type(), &RecentChooserWidget_Class::wrap_new);
  Glib::wrap_register(gtk_recent_filter_get_type(), &RecentFilter_Class::wrap_new);
  Glib::wrap_register(gtk_recent_manager_get_type(), &RecentManager_Class::wrap_new);
#ifndef GTKMM_DISABLE_DEPRECATED
  Glib::wrap_register(gtk_ruler_get_type(), &Ruler_Class::wrap_new);
  Glib::wrap_register(gtk_vruler_get_type(), &VRuler_Class::wrap_new);
  Glib::wrap_register(gtk_hruler_get_type(), &HRuler_Class::wrap_new);
#endif // *_DISABLE_DEPRECATED
  Glib::wrap_register(gtk_scale_get_type(), &Scale_Class::wrap_new);
  Glib::wrap_register(gtk_vscale_get_type(), &VScale_Class::wrap_new);
  Glib::wrap_register(gtk_hscale_get_type(), &HScale_Class::wrap_new);
  Glib::wrap_register(gtk_scale_button_get_type(), &ScaleButton_Class::wrap_new);
  Glib::wrap_register(gtk_scrollbar_get_type(), &Scrollbar_Class::wrap_new);
  Glib::wrap_register(gtk_vscrollbar_get_type(), &VScrollbar_Class::wrap_new);
  Glib::wrap_register(gtk_hscrollbar_get_type(), &HScrollbar_Class::wrap_new);
  Glib::wrap_register(gtk_scrolled_window_get_type(), &ScrolledWindow_Class::wrap_new);
  Glib::wrap_register(gtk_separator_get_type(), &Separator_Class::wrap_new);
  Glib::wrap_register(gtk_vseparator_get_type(), &VSeparator_Class::wrap_new);
  Glib::wrap_register(gtk_hseparator_get_type(), &HSeparator_Class::wrap_new);
  Glib::wrap_register(gtk_separator_menu_item_get_type(), &SeparatorMenuItem_Class::wrap_new);
  Glib::wrap_register(gtk_separator_tool_item_get_type(), &SeparatorToolItem_Class::wrap_new);
  Glib::wrap_register(gtk_settings_get_type(), &Settings_Class::wrap_new);
  Glib::wrap_register(gtk_size_group_get_type(), &SizeGroup_Class::wrap_new);
#ifndef G_OS_WIN32
  Glib::wrap_register(gtk_socket_get_type(), &Socket_Class::wrap_new);
#endif // ifndef G_OS_WIN32
  Glib::wrap_register(gtk_spin_button_get_type(), &SpinButton_Class::wrap_new);
  Glib::wrap_register(gtk_spinner_get_type(), &Spinner_Class::wrap_new);
  Glib::wrap_register(gtk_statusbar_get_type(), &Statusbar_Class::wrap_new);
  Glib::wrap_register(gtk_style_get_type(), &Style_Class::wrap_new);
  Glib::wrap_register(gtk_table_get_type(), &Table_Class::wrap_new);
  Glib::wrap_register(gtk_tearoff_menu_item_get_type(), &TearoffMenuItem_Class::wrap_new);
  Glib::wrap_register(gtk_text_buffer_get_type(), &TextBuffer_Class::wrap_new);
  Glib::wrap_register(gtk_text_child_anchor_get_type(), &TextChildAnchor_Class::wrap_new);
  Glib::wrap_register(gtk_text_mark_get_type(), &TextMark_Class::wrap_new);
  Glib::wrap_register(gtk_text_tag_get_type(), &TextTag_Class::wrap_new);
  Glib::wrap_register(gtk_text_tag_table_get_type(), &TextTagTable_Class::wrap_new);
  Glib::wrap_register(gtk_text_view_get_type(), &TextView_Class::wrap_new);
  Glib::wrap_register(gtk_toggle_action_get_type(), &ToggleAction_Class::wrap_new);
  Glib::wrap_register(gtk_toggle_button_get_type(), &ToggleButton_Class::wrap_new);
  Glib::wrap_register(gtk_toggle_tool_button_get_type(), &ToggleToolButton_Class::wrap_new);
  Glib::wrap_register(gtk_toolbar_get_type(), &Toolbar_Class::wrap_new);
  Glib::wrap_register(gtk_tool_button_get_type(), &ToolButton_Class::wrap_new);
  Glib::wrap_register(gtk_tool_item_get_type(), &ToolItem_Class::wrap_new);
  Glib::wrap_register(gtk_tool_item_group_get_type(), &ToolItemGroup_Class::wrap_new);
  Glib::wrap_register(gtk_tool_palette_get_type(), &ToolPalette_Class::wrap_new);
  Glib::wrap_register(gtk_tooltip_get_type(), &Tooltip_Class::wrap_new);
#ifndef GTKMM_DISABLE_DEPRECATED
  Glib::wrap_register(gtk_tooltips_get_type(), &Tooltips_Class::wrap_new);
#endif // *_DISABLE_DEPRECATED
  Glib::wrap_register(gtk_tree_model_filter_get_type(), &TreeModelFilter_Class::wrap_new);
  Glib::wrap_register(gtk_tree_model_sort_get_type(), &TreeModelSort_Class::wrap_new);
  Glib::wrap_register(gtk_tree_selection_get_type(), &TreeSelection_Class::wrap_new);
  Glib::wrap_register(gtk_tree_store_get_type(), &TreeStore_Class::wrap_new);
  Glib::wrap_register(gtk_tree_view_get_type(), &TreeView_Class::wrap_new);
  Glib::wrap_register(gtk_tree_view_column_get_type(), &TreeViewColumn_Class::wrap_new);
  Glib::wrap_register(gtk_ui_manager_get_type(), &UIManager_Class::wrap_new);
  Glib::wrap_register(gtk_viewport_get_type(), &Viewport_Class::wrap_new);
  Glib::wrap_register(gtk_widget_get_type(), &Widget_Class::wrap_new);
  Glib::wrap_register(gtk_window_group_get_type(), &WindowGroup_Class::wrap_new);
  Glib::wrap_register(gtk_window_get_type(), &Window_Class::wrap_new);

  // Register the gtkmm gtypes:
  AboutDialog::get_type();
  AccelGroup::get_type();
  AccelLabel::get_type();
  Action::get_type();
  ActionGroup::get_type();
  Adjustment::get_type();
  Alignment::get_type();
  Arrow::get_type();
  AspectFrame::get_type();
  Assistant::get_type();
  Bin::get_type();
  Box::get_type();
  VBox::get_type();
  HBox::get_type();
  Builder::get_type();
  Button::get_type();
  ButtonBox::get_type();
  VButtonBox::get_type();
  HButtonBox::get_type();
  CellRenderer::get_type();
  CellRendererAccel::get_type();
  CellRendererCombo::get_type();
  CellRendererPixbuf::get_type();
  CellRendererProgress::get_type();
  CellRendererSpin::get_type();
  CellRendererSpinner::get_type();
  CellRendererText::get_type();
  CellRendererToggle::get_type();
  CellView::get_type();
  CheckButton::get_type();
  CheckMenuItem::get_type();
  Clipboard::get_type();
  ColorButton::get_type();
  ColorSelection::get_type();
  ColorSelectionDialog::get_type();
  ComboBox::get_type();
#ifndef GTKMM_DISABLE_DEPRECATED
  ComboBoxEntry::get_type();
#endif // *_DISABLE_DEPRECATED
  Container::get_type();
  Dialog::get_type();
  DrawingArea::get_type();
  Entry::get_type();
  EntryBuffer::get_type();
  EntryCompletion::get_type();
  EventBox::get_type();
  Expander::get_type();
  FileChooserButton::get_type();
  FileChooserDialog::get_type();
  FileChooserWidget::get_type();
  FileFilter::get_type();
  Fixed::get_type();
  FontButton::get_type();
  FontSelection::get_type();
  FontSelectionDialog::get_type();
  Frame::get_type();
  HandleBox::get_type();
  IconFactory::get_type();
  IconTheme::get_type();
  IconView::get_type();
  Image::get_type();
  ImageMenuItem::get_type();
  InfoBar::get_type();
  Invisible::get_type();
  Item::get_type();
  Label::get_type();
  Layout::get_type();
  LinkButton::get_type();
  ListStore::get_type();
  Menu::get_type();
  MenuBar::get_type();
  MenuItem::get_type();
  MenuShell::get_type();
  MenuToolButton::get_type();
  MessageDialog::get_type();
  Misc::get_type();
  Notebook::get_type();
  Object::get_type();
  OffscreenWindow::get_type();
#ifndef GTKMM_DISABLE_DEPRECATED
  OptionMenu::get_type();
#endif // *_DISABLE_DEPRECATED
  Paned::get_type();
  HPaned::get_type();
  VPaned::get_type();
#ifndef G_OS_WIN32
  Plug::get_type();
#endif // ifndef G_OS_WIN32
  ProgressBar::get_type();
  RadioAction::get_type();
  RadioButton::get_type();
  RadioMenuItem::get_type();
  RadioToolButton::get_type();
  Range::get_type();
  RcStyle::get_type();
  RecentAction::get_type();
  RecentChooserDialog::get_type();
  RecentChooserMenu::get_type();
  RecentChooserWidget::get_type();
  RecentFilter::get_type();
  RecentManager::get_type();
#ifndef GTKMM_DISABLE_DEPRECATED
  Ruler::get_type();
  VRuler::get_type();
  HRuler::get_type();
#endif // *_DISABLE_DEPRECATED
  Scale::get_type();
  VScale::get_type();
  HScale::get_type();
  ScaleButton::get_type();
  Scrollbar::get_type();
  VScrollbar::get_type();
  HScrollbar::get_type();
  ScrolledWindow::get_type();
  Separator::get_type();
  VSeparator::get_type();
  HSeparator::get_type();
  SeparatorMenuItem::get_type();
  SeparatorToolItem::get_type();
  Settings::get_type();
  SizeGroup::get_type();
#ifndef G_OS_WIN32
  Socket::get_type();
#endif // ifndef G_OS_WIN32
  SpinButton::get_type();
  Spinner::get_type();
  Statusbar::get_type();
  Style::get_type();
  Table::get_type();
  TearoffMenuItem::get_type();
  TextBuffer::get_type();
  TextChildAnchor::get_type();
  TextMark::get_type();
  TextTag::get_type();
  TextTagTable::get_type();
  TextView::get_type();
  ToggleAction::get_type();
  ToggleButton::get_type();
  ToggleToolButton::get_type();
  Toolbar::get_type();
  ToolButton::get_type();
  ToolItem::get_type();
  ToolItemGroup::get_type();
  ToolPalette::get_type();
  Tooltip::get_type();
#ifndef GTKMM_DISABLE_DEPRECATED
  Tooltips::get_type();
#endif // *_DISABLE_DEPRECATED
  TreeModelFilter::get_type();
  TreeModelSort::get_type();
  TreeSelection::get_type();
  TreeStore::get_type();
  TreeView::get_type();
  TreeViewColumn::get_type();
  UIManager::get_type();
  Viewport::get_type();
  Widget::get_type();
  WindowGroup::get_type();
  Window::get_type();

} // wrap_init()

} // Gtk

