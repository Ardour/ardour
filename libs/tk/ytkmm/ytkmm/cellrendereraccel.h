// -*- c++ -*-
// Generated by gmmproc 2.45.3 -- DO NOT MODIFY!
#ifndef _GTKMM_CELLRENDERERACCEL_H
#define _GTKMM_CELLRENDERERACCEL_H


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* $Id: cellrendereraccel.hg,v 1.2 2006/05/11 11:40:24 murrayc Exp $ */

/* cellrendereraccel.h
 * 
 * Copyright (C) 2005 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <ytkmm/cellrenderertext.h>
#include <ytkmm/accelkey.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GtkCellRendererAccel GtkCellRendererAccel;
typedef struct _GtkCellRendererAccelClass GtkCellRendererAccelClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gtk
{ class CellRendererAccel_Class; } // namespace Gtk
namespace Gtk
{

/** @addtogroup gtkmmEnums gtkmm Enums and Flags */

/** 
 *
 * @ingroup gtkmmEnums
 */
enum CellRendererAccelMode
{
  CELL_RENDERER_ACCEL_MODE_GTK,
  CELL_RENDERER_ACCEL_MODE_OTHER
};

} // namespace Gtk


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Glib
{

template <>
class Value<Gtk::CellRendererAccelMode> : public Glib::Value_Enum<Gtk::CellRendererAccelMode>
{
public:
  static GType value_type() G_GNUC_CONST;
};

} // namespace Glib
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gtk
{


/** Renders a keyboard accelerator in a cell
 *
 * Gtk::CellRendererAccel displays a keyboard accelerator 
 * (i.e. a key combination like Ctrl+a).
 * If the cell renderer is editable, the accelerator can be changed by 
 * simply typing the new combination.
 *
 * @ingroup TreeView
 */

class CellRendererAccel : public CellRendererText
{
  public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef CellRendererAccel CppObjectType;
  typedef CellRendererAccel_Class CppClassType;
  typedef GtkCellRendererAccel BaseObjectType;
  typedef GtkCellRendererAccelClass BaseClassType;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  virtual ~CellRendererAccel();

#ifndef DOXYGEN_SHOULD_SKIP_THIS

private:
  friend class CellRendererAccel_Class;
  static CppClassType cellrendereraccel_class_;

  // noncopyable
  CellRendererAccel(const CellRendererAccel&);
  CellRendererAccel& operator=(const CellRendererAccel&);

protected:
  explicit CellRendererAccel(const Glib::ConstructParams& construct_params);
  explicit CellRendererAccel(GtkCellRendererAccel* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GtkObject.
  GtkCellRendererAccel*       gobj()       { return reinterpret_cast<GtkCellRendererAccel*>(gobject_); }

  ///Provides access to the underlying C GtkObject.
  const GtkCellRendererAccel* gobj() const { return reinterpret_cast<GtkCellRendererAccel*>(gobject_); }


public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::
  /// This is a default handler for the signal signal_accel_edited().
  virtual void on_accel_edited(const Glib::ustring& path_string, guint accel_key, Gdk::ModifierType accel_mods, guint hardware_keycode);
  /// This is a default handler for the signal signal_accel_cleared().
  virtual void on_accel_cleared(const Glib::ustring& path_string);


private:

public:

  CellRendererAccel();

 
  //TODO: Wrap accel_key and accel_mods in an AccelKey?
  
  /**
   * @par Slot Prototype:
   * <tt>void on_my_%accel_edited(const Glib::ustring& path_string, guint accel_key, Gdk::ModifierType accel_mods, guint hardware_keycode)</tt>
   *
   */

  Glib::SignalProxy4< void,const Glib::ustring&,guint,Gdk::ModifierType,guint > signal_accel_edited();

  
  /**
   * @par Slot Prototype:
   * <tt>void on_my_%accel_cleared(const Glib::ustring& path_string)</tt>
   *
   */

  Glib::SignalProxy1< void,const Glib::ustring& > signal_accel_cleared();


  /** The keyval of the accelerator.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint > property_accel_key() ;

/** The keyval of the accelerator.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_accel_key() const;

  /** The modifier mask of the accelerator.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Gdk::ModifierType > property_accel_mods() ;

/** The modifier mask of the accelerator.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Gdk::ModifierType > property_accel_mods() const;

  /** The hardware keycode of the accelerator.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< guint > property_keycode() ;

/** The hardware keycode of the accelerator.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< guint > property_keycode() const;

  /** The type of accelerators.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< CellRendererAccelMode > property_accel_mode() ;

/** The type of accelerators.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< CellRendererAccelMode > property_accel_mode() const;


  virtual Glib::PropertyProxy_Base _property_renderable(); //override


};

} /* namespace Gtk */


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gtk::CellRendererAccel
   */
  Gtk::CellRendererAccel* wrap(GtkCellRendererAccel* object, bool take_copy = false);
} //namespace Glib


#endif /* _GTKMM_CELLRENDERERACCEL_H */

