// -*- c++ -*-
// Generated by gmmproc 2.45.3 -- DO NOT MODIFY!
#ifndef _GTKMM_CELLRENDERERPROGRESS_H
#define _GTKMM_CELLRENDERERPROGRESS_H


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* $Id: cellrendererprogress.hg,v 1.3 2006/05/10 20:59:27 murrayc Exp $ */

/* Copyright (C) 2004 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <ytkmm/cellrenderer.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GtkCellRendererProgress GtkCellRendererProgress;
typedef struct _GtkCellRendererProgressClass GtkCellRendererProgressClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gtk
{ class CellRendererProgress_Class; } // namespace Gtk
namespace Gtk
{

/** Renders numbers as progress bars.
 *
 * @ingroup TreeView
 */

class CellRendererProgress : public CellRenderer
{
  public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef CellRendererProgress CppObjectType;
  typedef CellRendererProgress_Class CppClassType;
  typedef GtkCellRendererProgress BaseObjectType;
  typedef GtkCellRendererProgressClass BaseClassType;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  virtual ~CellRendererProgress();

#ifndef DOXYGEN_SHOULD_SKIP_THIS

private:
  friend class CellRendererProgress_Class;
  static CppClassType cellrendererprogress_class_;

  // noncopyable
  CellRendererProgress(const CellRendererProgress&);
  CellRendererProgress& operator=(const CellRendererProgress&);

protected:
  explicit CellRendererProgress(const Glib::ConstructParams& construct_params);
  explicit CellRendererProgress(GtkCellRendererProgress* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GtkObject.
  GtkCellRendererProgress*       gobj()       { return reinterpret_cast<GtkCellRendererProgress*>(gobject_); }

  ///Provides access to the underlying C GtkObject.
  const GtkCellRendererProgress* gobj() const { return reinterpret_cast<GtkCellRendererProgress*>(gobject_); }


public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


private:

public:
  CellRendererProgress();

  /** Value of the progress bar.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_value() ;

/** Value of the progress bar.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_value() const;

  /** Text on the progress bar.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< Glib::ustring > property_text() ;

/** Text on the progress bar.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::ustring > property_text() const;

  /** Set this to positive values to indicate that some progress is made, but you don't know how much.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_pulse() ;

/** Set this to positive values to indicate that some progress is made, but you don't know how much.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_pulse() const;

  /** The horizontal text alignment, from 0 (left) to 1 (right). Reversed for RTL layouts.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< float > property_text_xalign() ;

/** The horizontal text alignment, from 0 (left) to 1 (right). Reversed for RTL layouts.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< float > property_text_xalign() const;

  /** The vertical text alignment, from 0 (top) to 1 (bottom).
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< float > property_text_yalign() ;

/** The vertical text alignment, from 0 (top) to 1 (bottom).
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< float > property_text_yalign() const;

  /** Orientation and growth direction of the progress bar.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< ProgressBarOrientation > property_orientation() ;

/** Orientation and growth direction of the progress bar.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< ProgressBarOrientation > property_orientation() const;

  
  virtual Glib::PropertyProxy_Base _property_renderable();


};

} // namespace Gtk


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gtk::CellRendererProgress
   */
  Gtk::CellRendererProgress* wrap(GtkCellRendererProgress* object, bool take_copy = false);
} //namespace Glib


#endif /* _GTKMM_CELLRENDERERPROGRESS_H */

