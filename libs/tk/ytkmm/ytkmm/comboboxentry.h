// -*- c++ -*-
// Generated by gmmproc 2.45.3 -- DO NOT MODIFY!
#ifndef _GTKMM_COMBOBOXENTRY_H
#define _GTKMM_COMBOBOXENTRY_H


#ifndef GTKMM_DISABLE_DEPRECATED


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* $Id: comboboxentry.hg,v 1.10 2005/05/26 21:07:42 murrayc Exp $ */

/* combobox.h
 * 
 * Copyright (C) 2003 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <ytkmm/combobox.h>
#include <ytkmm/entry.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GtkComboBoxEntry GtkComboBoxEntry;
typedef struct _GtkComboBoxEntryClass GtkComboBoxEntryClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gtk
{ class ComboBoxEntry_Class; } // namespace Gtk
namespace Gtk
{

/** A text entry field with a dropdown list.
 * A ComboBoxEntry is a widget that allows the user to choose from a list of valid choices or enter a different 
 * value. It is very similar to a ComboBox, but it displays the selected value in an entry to allow modifying it.
 *
 * In contrast to a ComboBox, the underlying model of a ComboBoxEntry must always have a text column (see 
 * set_text_column()), and the entry will show the content of the text column in the selected row. To get the text from the entry, use get_active_text().
 *
 * The changed signal will be emitted while typing into a ComboBoxEntry, as well as when selecting an item from the 
 * ComboBoxEntry's list. Use get_active() to discover whether an item was actually selected from 
 * the list. 
 *
 * See also ComboBoxEntryText, which is specialised for a single text column.
 *
 * To add and remove strings from the list, just modify the model using its data manipulation API. You can get the 
 * Entry by using get_child().
 *
 * If you have special needs that go beyond a simple entry (e.g. input validation), it is possible to replace the 
 * child entry by a different widget using Gtk::Container::remove() and Gtk::Container::add(). 
 *
 * @ingroup Widgets
 *
 * @deprecated Instead use ComboBox with has_entry = true.
 */

class ComboBoxEntry : public ComboBox
{
  public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef ComboBoxEntry CppObjectType;
  typedef ComboBoxEntry_Class CppClassType;
  typedef GtkComboBoxEntry BaseObjectType;
  typedef GtkComboBoxEntryClass BaseClassType;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  virtual ~ComboBoxEntry();

#ifndef DOXYGEN_SHOULD_SKIP_THIS

private:
  friend class ComboBoxEntry_Class;
  static CppClassType comboboxentry_class_;

  // noncopyable
  ComboBoxEntry(const ComboBoxEntry&);
  ComboBoxEntry& operator=(const ComboBoxEntry&);

protected:
  explicit ComboBoxEntry(const Glib::ConstructParams& construct_params);
  explicit ComboBoxEntry(GtkComboBoxEntry* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GtkObject.
  GtkComboBoxEntry*       gobj()       { return reinterpret_cast<GtkComboBoxEntry*>(gobject_); }

  ///Provides access to the underlying C GtkObject.
  const GtkComboBoxEntry* gobj() const { return reinterpret_cast<GtkComboBoxEntry*>(gobject_); }


public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


private:

  
public:
  ComboBoxEntry();
  //gtkmmproc error: gtk_combo_box_entyry_new_text : ignored method defs lookup failed //See ComboBoxEntryText for an equivalent of gtk_combo_box_entry_new_text().

  /** Creates a new ComboBoxEntry which has an Entry as child and a list of strings as popup. You can get the 
   * Entry from a ComboBoxEntry using get_entry(). To add and remove strings from the list, just modify @a model 
   * using its data manipulation API.
   *
   * @param model A TreeModel.
   * @param text_column A column in @a model to get the strings from.
   */
    explicit ComboBoxEntry(const Glib::RefPtr<TreeModel>& model, const TreeModelColumnBase& text_column);

  
  /** Creates a new ComboBoxEntry which has an Entry as child and a list of strings as popup. You can get the 
   * Entry from a ComboBoxEntry using get_entry(). To add and remove strings from the list, just modify @a model 
   * using its data manipulation API.
   *
   * @param model A TreeModel.
   * @param text_column A column in @a model to get the strings from.
   */
    explicit ComboBoxEntry(const Glib::RefPtr<TreeModel>& model, int text_column =  0);


  /** Sets the model column which @a entry_box should use to get strings from
   * to be @a text_column.
   * 
   * Deprecated: 2.24: Use set_entry_text_column() instead
   * 
   * @param text_column A column in @a model to get the strings from.
   */
  void set_text_column(const TreeModelColumnBase& text_column) const;   
  
  /** Sets the model column which @a entry_box should use to get strings from
   * to be @a text_column.
   * 
   * Deprecated: 2.24: Use set_entry_text_column() instead
   * 
   * @param text_column A column in @a model to get the strings from.
   */
  void set_text_column(int text_column) const; 
  
  /** Returns the column which @a entry_box is using to get the strings from.
   * 
   * Deprecated: 2.24: Use get_entry_text_column() instead
   * 
   * @return A column in the data source model of @a entry_box.
   */
  int get_text_column() const; 

  /** Returns the currently active string.
   * @result The currently active text.
   */
  Glib::ustring get_active_text() const;

  //The child is always an entry:

  /** @see Bin::get_child().
   */
  Entry* get_entry();

  /** @see Bin::get_child().
   */
  const Entry* get_entry() const;   
  
  /** A column in the data source model to get the strings from.
   *
   * @return A PropertyProxy that allows you to get or set the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy< int > property_text_column() ;

/** A column in the data source model to get the strings from.
   *
   * @return A PropertyProxy_ReadOnly that allows you to get the value of the property,
   * or receive notification when the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< int > property_text_column() const;
                                   

};


} // namespace Gtk


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gtk::ComboBoxEntry
   */
  Gtk::ComboBoxEntry* wrap(GtkComboBoxEntry* object, bool take_copy = false);
} //namespace Glib


#endif // GTKMM_DISABLE_DEPRECATED


#endif /* _GTKMM_COMBOBOXENTRY_H */

