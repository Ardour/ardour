// -*- c++ -*-
// Generated by gmmproc 2.45.3 -- DO NOT MODIFY!
#ifndef _GTKMM_FILECHOOSERDIALOG_H
#define _GTKMM_FILECHOOSERDIALOG_H


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* $Id: filechooserdialog.hg,v 1.4 2005/01/09 12:42:07 murrayc Exp $ */

/* filechooserdialog.h
 *
 * Copyright (C) 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <ytkmm/dialog.h>
#include <ytkmm/filechooser.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GtkFileChooserDialog GtkFileChooserDialog;
typedef struct _GtkFileChooserDialogClass GtkFileChooserDialogClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gtk
{ class FileChooserDialog_Class; } // namespace Gtk
namespace Gtk
{

/** Convenient file chooser window.
 *
 * @ingroup Dialogs
 */

class FileChooserDialog
  : public Dialog,
    public FileChooser
{
  public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef FileChooserDialog CppObjectType;
  typedef FileChooserDialog_Class CppClassType;
  typedef GtkFileChooserDialog BaseObjectType;
  typedef GtkFileChooserDialogClass BaseClassType;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  virtual ~FileChooserDialog();

#ifndef DOXYGEN_SHOULD_SKIP_THIS

private:
  friend class FileChooserDialog_Class;
  static CppClassType filechooserdialog_class_;

  // noncopyable
  FileChooserDialog(const FileChooserDialog&);
  FileChooserDialog& operator=(const FileChooserDialog&);

protected:
  explicit FileChooserDialog(const Glib::ConstructParams& construct_params);
  explicit FileChooserDialog(GtkFileChooserDialog* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GtkObject.
  GtkFileChooserDialog*       gobj()       { return reinterpret_cast<GtkFileChooserDialog*>(gobject_); }

  ///Provides access to the underlying C GtkObject.
  const GtkFileChooserDialog* gobj() const { return reinterpret_cast<GtkFileChooserDialog*>(gobject_); }


public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


private:

  
public:
  
  explicit FileChooserDialog(Gtk::Window& parent, const Glib::ustring& title, FileChooserAction action = FILE_CHOOSER_ACTION_OPEN);
  explicit FileChooserDialog(const Glib::ustring& title, FileChooserAction action = FILE_CHOOSER_ACTION_OPEN);

  
  explicit FileChooserDialog(Gtk::Window& parent, const Glib::ustring& title, FileChooserAction action, const Glib::ustring& backend);
  explicit FileChooserDialog(const Glib::ustring& title, FileChooserAction action, const Glib::ustring& backend);


};

} // namespace Gtk


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gtk::FileChooserDialog
   */
  Gtk::FileChooserDialog* wrap(GtkFileChooserDialog* object, bool take_copy = false);
} //namespace Glib


#endif /* _GTKMM_FILECHOOSERDIALOG_H */

