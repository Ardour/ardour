// -*- c++ -*-
// Generated by gmmproc 2.45.3 -- DO NOT MODIFY!
#ifndef _GTKMM_ITEM_H
#define _GTKMM_ITEM_H


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* $Id: item.hg,v 1.1 2003/01/21 13:40:28 murrayc Exp $ */

/* item.h
 *
 * Copyright (C) 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <ytkmm/bin.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GtkItem GtkItem;
typedef struct _GtkItemClass GtkItemClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gtk
{ class Item_Class; } // namespace Gtk
namespace Gtk
{

/** This class should be considered as a virtual base class.
 * Only the signals and methods it provides are of any interest.
 * You don't want to instantiate any objects of that class.
 *
 * @ingroup Widgets
 */

class Item : public Bin
{
  public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef Item CppObjectType;
  typedef Item_Class CppClassType;
  typedef GtkItem BaseObjectType;
  typedef GtkItemClass BaseClassType;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  virtual ~Item();

#ifndef DOXYGEN_SHOULD_SKIP_THIS

private:
  friend class Item_Class;
  static CppClassType item_class_;

  // noncopyable
  Item(const Item&);
  Item& operator=(const Item&);

protected:
  explicit Item(const Glib::ConstructParams& construct_params);
  explicit Item(GtkItem* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GtkObject.
  GtkItem*       gobj()       { return reinterpret_cast<GtkItem*>(gobject_); }

  ///Provides access to the underlying C GtkObject.
  const GtkItem* gobj() const { return reinterpret_cast<GtkItem*>(gobject_); }


public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::
  /// This is a default handler for the signal signal_select().
  virtual void on_select();
  /// This is a default handler for the signal signal_deselect().
  virtual void on_deselect();
  /// This is a default handler for the signal signal_toggle().
  virtual void on_toggle();


private:

public:


  void select();
  
  /**
   * @par Slot Prototype:
   * <tt>void on_my_%select()</tt>
   *
   */

  Glib::SignalProxy0< void > signal_select();


  void deselect();
  
  /**
   * @par Slot Prototype:
   * <tt>void on_my_%deselect()</tt>
   *
   */

  Glib::SignalProxy0< void > signal_deselect();


  void toggle();
  
  /**
   * @par Slot Prototype:
   * <tt>void on_my_%toggle()</tt>
   *
   */

  Glib::SignalProxy0< void > signal_toggle();


protected:
  Item();


};

} /* namespace Gtk */


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gtk::Item
   */
  Gtk::Item* wrap(GtkItem* object, bool take_copy = false);
} //namespace Glib


#endif /* _GTKMM_ITEM_H */

