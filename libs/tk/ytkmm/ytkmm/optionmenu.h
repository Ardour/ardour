// -*- c++ -*-
// Generated by gmmproc 2.45.3 -- DO NOT MODIFY!
#ifndef _GTKMM_OPTIONMENU_H
#define _GTKMM_OPTIONMENU_H

#include <ytkmm/ytkmmconfig.h>

#ifndef GTKMM_DISABLE_DEPRECATED


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/*
 * Copyright (C) 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

 // This is for including the config header before any code (such as
// the #ifndef GTKMM_DISABLE_DEPRECATED in deprecated classes) is generated:


#include <ytkmm/button.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GtkOptionMenu GtkOptionMenu;
typedef struct _GtkOptionMenuClass GtkOptionMenuClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gtk
{ class OptionMenu_Class; } // namespace Gtk
namespace Gtk
{

class Menu;

/** A widget used to choose from a list of valid choices.
 *
 * A Gtk::OptionMenu is a widget that allows the user to choose from a list
 * of valid choices. The Gtk::OptionMenu displays the selected choice. When
 * activated the GtkOptionMenu displays a popup Gtk::Menu which allows the
 * user to make a new choice.
 *
 * @deprecated Use the ComboBox widget instead.
 */

class OptionMenu : public Button
{
  public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef OptionMenu CppObjectType;
  typedef OptionMenu_Class CppClassType;
  typedef GtkOptionMenu BaseObjectType;
  typedef GtkOptionMenuClass BaseClassType;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  virtual ~OptionMenu();

#ifndef DOXYGEN_SHOULD_SKIP_THIS

private:
  friend class OptionMenu_Class;
  static CppClassType optionmenu_class_;

  // noncopyable
  OptionMenu(const OptionMenu&);
  OptionMenu& operator=(const OptionMenu&);

protected:
  explicit OptionMenu(const Glib::ConstructParams& construct_params);
  explicit OptionMenu(GtkOptionMenu* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GtkObject.
  GtkOptionMenu*       gobj()       { return reinterpret_cast<GtkOptionMenu*>(gobject_); }

  ///Provides access to the underlying C GtkObject.
  const GtkOptionMenu* gobj() const { return reinterpret_cast<GtkOptionMenu*>(gobject_); }


public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::
  /// This is a default handler for the signal signal_changed().
  virtual void on_changed();


private:

  
public:

  OptionMenu();
  

  void set_menu(Menu& menu);
  
  Menu* get_menu();
  
  const Menu* get_menu() const;
  
  void remove_menu();
  
  /** Retrieves the index of the currently selected menu item. The menu
   * items are numbered from top to bottom, starting with 0. 
   * 
   * Deprecated: 2.4: Use Gtk::ComboBox instead.
   * 
   * @return Index of the selected menu item, or -1 if there are no menu items.
   */
  int get_history() const;
  
  void set_history(guint index);

  
  /**
   * @par Slot Prototype:
   * <tt>void on_my_%changed()</tt>
   *
   */

  Glib::SignalProxy0< void > signal_changed();


private:
  void init_accels_handler_();


};

} // namespace Gtk


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gtk::OptionMenu
   */
  Gtk::OptionMenu* wrap(GtkOptionMenu* object, bool take_copy = false);
} //namespace Glib


#endif // GTKMM_DISABLE_DEPRECATED


#endif /* _GTKMM_OPTIONMENU_H */

