// -*- c++ -*-
// Generated by gmmproc 2.45.3 -- DO NOT MODIFY!
#ifndef _GTKMM_SEPARATOR_H
#define _GTKMM_SEPARATOR_H


#include <glibmm/ustring.h>
#include <sigc++/sigc++.h>

/* $Id: separator.hg,v 1.1 2003/01/21 13:40:37 murrayc Exp $ */

/* separator.h
 * 
 * Copyright (C) 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <ytkmm/widget.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GtkSeparator GtkSeparator;
typedef struct _GtkSeparatorClass GtkSeparatorClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gtk
{ class Separator_Class; } // namespace Gtk
#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GtkVSeparator GtkVSeparator;
typedef struct _GtkVSeparatorClass GtkVSeparatorClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gtk
{ class VSeparator_Class; } // namespace Gtk
#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GtkHSeparator GtkHSeparator;
typedef struct _GtkHSeparatorClass GtkHSeparatorClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gtk
{ class HSeparator_Class; } // namespace Gtk
namespace Gtk
{

//TODO: Inherit/Implement Orientation when we can break ABI.


/** Separator base class.
 * Abstract base class for Gtk::VSeperator and Gtk::HSeperator.
 */

class Separator : public Widget
{
  public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef Separator CppObjectType;
  typedef Separator_Class CppClassType;
  typedef GtkSeparator BaseObjectType;
  typedef GtkSeparatorClass BaseClassType;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  virtual ~Separator();

#ifndef DOXYGEN_SHOULD_SKIP_THIS

private:
  friend class Separator_Class;
  static CppClassType separator_class_;

  // noncopyable
  Separator(const Separator&);
  Separator& operator=(const Separator&);

protected:
  explicit Separator(const Glib::ConstructParams& construct_params);
  explicit Separator(GtkSeparator* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GtkObject.
  GtkSeparator*       gobj()       { return reinterpret_cast<GtkSeparator*>(gobject_); }

  ///Provides access to the underlying C GtkObject.
  const GtkSeparator* gobj() const { return reinterpret_cast<GtkSeparator*>(gobject_); }


public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


private:

public:
  

protected:
  Separator();


};

/** Vertical line widget.
 * Filler widget used to separate widgets with a visible line.
 * This widget has no window and receives no configuration events.
 * It should be considered a leaf widget.
 *
 * @ingroup Widgets
 */

class VSeparator : public Separator
{
  public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef VSeparator CppObjectType;
  typedef VSeparator_Class CppClassType;
  typedef GtkVSeparator BaseObjectType;
  typedef GtkVSeparatorClass BaseClassType;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  virtual ~VSeparator();

#ifndef DOXYGEN_SHOULD_SKIP_THIS

private:
  friend class VSeparator_Class;
  static CppClassType vseparator_class_;

  // noncopyable
  VSeparator(const VSeparator&);
  VSeparator& operator=(const VSeparator&);

protected:
  explicit VSeparator(const Glib::ConstructParams& construct_params);
  explicit VSeparator(GtkVSeparator* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GtkObject.
  GtkVSeparator*       gobj()       { return reinterpret_cast<GtkVSeparator*>(gobject_); }

  ///Provides access to the underlying C GtkObject.
  const GtkVSeparator* gobj() const { return reinterpret_cast<GtkVSeparator*>(gobject_); }


public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


private:

public:
  VSeparator();
  

};


/** Horizontal line widget.
 * Filler widget used to separate widgets with a visible line.
 * This widget has no window and receives no configuration events.
 * It should be considered a leaf widget.
 *
 * @ingroup Widgets
 */

class HSeparator : public Separator
{
  public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  typedef HSeparator CppObjectType;
  typedef HSeparator_Class CppClassType;
  typedef GtkHSeparator BaseObjectType;
  typedef GtkHSeparatorClass BaseClassType;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

  virtual ~HSeparator();

#ifndef DOXYGEN_SHOULD_SKIP_THIS

private:
  friend class HSeparator_Class;
  static CppClassType hseparator_class_;

  // noncopyable
  HSeparator(const HSeparator&);
  HSeparator& operator=(const HSeparator&);

protected:
  explicit HSeparator(const Glib::ConstructParams& construct_params);
  explicit HSeparator(GtkHSeparator* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GtkObject.
  GtkHSeparator*       gobj()       { return reinterpret_cast<GtkHSeparator*>(gobject_); }

  ///Provides access to the underlying C GtkObject.
  const GtkHSeparator* gobj() const { return reinterpret_cast<GtkHSeparator*>(gobject_); }


public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


private:

public:
  HSeparator();
  

};

} /* namespace Gtk */


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gtk::Separator
   */
  Gtk::Separator* wrap(GtkSeparator* object, bool take_copy = false);
} //namespace Glib


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gtk::VSeparator
   */
  Gtk::VSeparator* wrap(GtkVSeparator* object, bool take_copy = false);
} //namespace Glib


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gtk::HSeparator
   */
  Gtk::HSeparator* wrap(GtkHSeparator* object, bool take_copy = false);
} //namespace Glib


#endif /* _GTKMM_SEPARATOR_H */

