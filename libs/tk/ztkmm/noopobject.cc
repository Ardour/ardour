// Generated by gtkmmproc -- DO NOT MODIFY!


#include <glibmm.h>

#include <ztkmm/noopobject.h>
#include <ztkmm/private/noopobject_p.h>


// -*- c++ -*-
/* $Id: noopobject.ccg,v 1.1 2003/01/21 13:37:06 murrayc Exp $ */

/* Copyright 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <ztk/atknoopobject.h>


namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<Atk::NoOpObject> wrap(AtkNoOpObject* object, bool take_copy)
{
  return Glib::RefPtr<Atk::NoOpObject>( dynamic_cast<Atk::NoOpObject*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Atk
{


/* The *_Class implementation: */

const Glib::Class& NoOpObject_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &NoOpObject_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(atk_no_op_object_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  Component::add_interface(get_type());
  Action::add_interface(get_type());
  EditableText::add_interface(get_type());
  Image::add_interface(get_type());
  Selection::add_interface(get_type());
  Table::add_interface(get_type());
  Text::add_interface(get_type());
  Hypertext::add_interface(get_type());
  Value::add_interface(get_type());

  }

  return *this;
}


void NoOpObject_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* NoOpObject_Class::wrap_new(GObject* object)
{
  return new NoOpObject((AtkNoOpObject*)object);
}


/* The implementation: */

AtkNoOpObject* NoOpObject::gobj_copy()
{
  reference();
  return gobj();
}

NoOpObject::NoOpObject(const Glib::ConstructParams& construct_params)
:
  Atk::Object(construct_params)
{

}

NoOpObject::NoOpObject(AtkNoOpObject* castitem)
:
  Atk::Object((AtkObject*)(castitem))
{}


NoOpObject::~NoOpObject()
{}


NoOpObject::CppClassType NoOpObject::noopobject_class_; // initialize static member

GType NoOpObject::get_type()
{
  return noopobject_class_.init().get_type();
}


GType NoOpObject::get_base_type()
{
  return atk_no_op_object_get_type();
}


} // namespace Atk


