// Generated by gtkmmproc -- DO NOT MODIFY!


#include <glibmm.h>

#include <ztkmm/stateset.h>
#include <ztkmm/private/stateset_p.h>

#include <ztk/atk-enum-types.h>

// -*- c++ -*-
/* $Id: stateset.ccg,v 1.1 2003/01/21 13:37:07 murrayc Exp $ */

/* Copyright 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <ztk/atkobject.h>
#include <ztk/atkstateset.h>


namespace Atk
{

void StateSet::add_states(const Glib::ArrayHandle<StateType>& types)
{
  atk_state_set_add_states(gobj(), (AtkStateType*) types.data(), types.size());
}

bool StateSet::contains_states(const Glib::ArrayHandle<StateType>& types) const
{
  return atk_state_set_contains_states(
      const_cast<AtkStateSet*>(gobj()), (AtkStateType*) types.data(), types.size());
}

} // namespace Atk


namespace
{
} // anonymous namespace

// static
GType Glib::Value<Atk::StateType>::value_type()
{
  return atk_state_type_get_type();
}


namespace Glib
{

Glib::RefPtr<Atk::StateSet> wrap(AtkStateSet* object, bool take_copy)
{
  return Glib::RefPtr<Atk::StateSet>( dynamic_cast<Atk::StateSet*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace Atk
{


/* The *_Class implementation: */

const Glib::Class& StateSet_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &StateSet_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(atk_state_set_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void StateSet_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* StateSet_Class::wrap_new(GObject* object)
{
  return new StateSet((AtkStateSet*)object);
}


/* The implementation: */

AtkStateSet* StateSet::gobj_copy()
{
  reference();
  return gobj();
}

StateSet::StateSet(const Glib::ConstructParams& construct_params)
:
  Glib::Object(construct_params)
{

}

StateSet::StateSet(AtkStateSet* castitem)
:
  Glib::Object((GObject*)(castitem))
{}


StateSet::~StateSet()
{}


StateSet::CppClassType StateSet::stateset_class_; // initialize static member

GType StateSet::get_type()
{
  return stateset_class_.init().get_type();
}


GType StateSet::get_base_type()
{
  return atk_state_set_get_type();
}


StateSet::StateSet()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Glib::Object(Glib::ConstructParams(stateset_class_.init()))
{
  

}

Glib::RefPtr<StateSet> StateSet::create()
{
  return Glib::RefPtr<StateSet>( new StateSet() );
}

bool StateSet::is_empty() const
{
  return atk_state_set_is_empty(const_cast<AtkStateSet*>(gobj()));
}

bool StateSet::add_state(Atk::StateType type)
{
  return atk_state_set_add_state(gobj(), ((AtkStateType)(type)));
}

void StateSet::clear_states()
{
  atk_state_set_clear_states(gobj());
}

bool StateSet::contains_state(Atk::StateType type)
{
  return atk_state_set_contains_state(gobj(), ((AtkStateType)(type)));
}

bool StateSet::remove_state(Atk::StateType type)
{
  return atk_state_set_remove_state(gobj(), ((AtkStateType)(type)));
}

Glib::RefPtr<StateSet> StateSet::and_sets(const Glib::RefPtr<StateSet>& compare_set)
{
  return Glib::wrap(atk_state_set_and_sets(gobj(), Glib::unwrap(compare_set)));
}

Glib::RefPtr<StateSet> StateSet::or_sets(const Glib::RefPtr<StateSet>& compare_set)
{
  return Glib::wrap(atk_state_set_or_sets(gobj(), Glib::unwrap(compare_set)));
}

Glib::RefPtr<StateSet> StateSet::xor_sets(const Glib::RefPtr<StateSet>& compare_set)
{
  return Glib::wrap(atk_state_set_xor_sets(gobj(), Glib::unwrap(compare_set)));
}


} // namespace Atk


